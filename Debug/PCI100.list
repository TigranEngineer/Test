
PCI100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039ec  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003bcc  08003bcc  00004bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c6c  08003c6c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c6c  08003c6c  00004c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c74  08003c74  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c74  08003c74  00004c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c78  08003c78  00004c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c7c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003c88  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003c88  00005108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf6a  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c52  00000000  00000000  00011fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  00013bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080f  00000000  00000000  00014648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002169c  00000000  00000000  00014e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfd9  00000000  00000000  000364f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1ed8  00000000  00000000  000444cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001163a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab4  00000000  00000000  001163e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00118e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003bb4 	.word	0x08003bb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	08003bb4 	.word	0x08003bb4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b988 	b.w	8000558 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	468e      	mov	lr, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d962      	bls.n	800033c <__udivmoddi4+0xdc>
 8000276:	fab2 f682 	clz	r6, r2
 800027a:	b14e      	cbz	r6, 8000290 <__udivmoddi4+0x30>
 800027c:	f1c6 0320 	rsb	r3, r6, #32
 8000280:	fa01 f806 	lsl.w	r8, r1, r6
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	40b7      	lsls	r7, r6
 800028a:	ea43 0808 	orr.w	r8, r3, r8
 800028e:	40b4      	lsls	r4, r6
 8000290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000294:	fa1f fc87 	uxth.w	ip, r7
 8000298:	fbb8 f1fe 	udiv	r1, r8, lr
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b4:	f080 80ea 	bcs.w	800048c <__udivmoddi4+0x22c>
 80002b8:	429a      	cmp	r2, r3
 80002ba:	f240 80e7 	bls.w	800048c <__udivmoddi4+0x22c>
 80002be:	3902      	subs	r1, #2
 80002c0:	443b      	add	r3, r7
 80002c2:	1a9a      	subs	r2, r3, r2
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d6:	459c      	cmp	ip, r3
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	18fb      	adds	r3, r7, r3
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	f080 80d6 	bcs.w	8000490 <__udivmoddi4+0x230>
 80002e4:	459c      	cmp	ip, r3
 80002e6:	f240 80d3 	bls.w	8000490 <__udivmoddi4+0x230>
 80002ea:	443b      	add	r3, r7
 80002ec:	3802      	subs	r0, #2
 80002ee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f2:	eba3 030c 	sub.w	r3, r3, ip
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40f3      	lsrs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	e9c5 3200 	strd	r3, r2, [r5]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d905      	bls.n	8000316 <__udivmoddi4+0xb6>
 800030a:	b10d      	cbz	r5, 8000310 <__udivmoddi4+0xb0>
 800030c:	e9c5 0100 	strd	r0, r1, [r5]
 8000310:	2100      	movs	r1, #0
 8000312:	4608      	mov	r0, r1
 8000314:	e7f5      	b.n	8000302 <__udivmoddi4+0xa2>
 8000316:	fab3 f183 	clz	r1, r3
 800031a:	2900      	cmp	r1, #0
 800031c:	d146      	bne.n	80003ac <__udivmoddi4+0x14c>
 800031e:	4573      	cmp	r3, lr
 8000320:	d302      	bcc.n	8000328 <__udivmoddi4+0xc8>
 8000322:	4282      	cmp	r2, r0
 8000324:	f200 8105 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 8000328:	1a84      	subs	r4, r0, r2
 800032a:	eb6e 0203 	sbc.w	r2, lr, r3
 800032e:	2001      	movs	r0, #1
 8000330:	4690      	mov	r8, r2
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e5      	beq.n	8000302 <__udivmoddi4+0xa2>
 8000336:	e9c5 4800 	strd	r4, r8, [r5]
 800033a:	e7e2      	b.n	8000302 <__udivmoddi4+0xa2>
 800033c:	2a00      	cmp	r2, #0
 800033e:	f000 8090 	beq.w	8000462 <__udivmoddi4+0x202>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	2e00      	cmp	r6, #0
 8000348:	f040 80a4 	bne.w	8000494 <__udivmoddi4+0x234>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	0c03      	lsrs	r3, r0, #16
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	b280      	uxth	r0, r0
 8000356:	b2bc      	uxth	r4, r7
 8000358:	2101      	movs	r1, #1
 800035a:	fbb2 fcfe 	udiv	ip, r2, lr
 800035e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000366:	fb04 f20c 	mul.w	r2, r4, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d907      	bls.n	800037e <__udivmoddi4+0x11e>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x11c>
 8000376:	429a      	cmp	r2, r3
 8000378:	f200 80e0 	bhi.w	800053c <__udivmoddi4+0x2dc>
 800037c:	46c4      	mov	ip, r8
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	fbb3 f2fe 	udiv	r2, r3, lr
 8000384:	fb0e 3312 	mls	r3, lr, r2, r3
 8000388:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800038c:	fb02 f404 	mul.w	r4, r2, r4
 8000390:	429c      	cmp	r4, r3
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0x144>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f102 30ff 	add.w	r0, r2, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x142>
 800039c:	429c      	cmp	r4, r3
 800039e:	f200 80ca 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 80003a2:	4602      	mov	r2, r0
 80003a4:	1b1b      	subs	r3, r3, r4
 80003a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003aa:	e7a5      	b.n	80002f8 <__udivmoddi4+0x98>
 80003ac:	f1c1 0620 	rsb	r6, r1, #32
 80003b0:	408b      	lsls	r3, r1
 80003b2:	fa22 f706 	lsr.w	r7, r2, r6
 80003b6:	431f      	orrs	r7, r3
 80003b8:	fa0e f401 	lsl.w	r4, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c8:	4323      	orrs	r3, r4
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	fa1f fc87 	uxth.w	ip, r7
 80003d2:	fbbe f0f9 	udiv	r0, lr, r9
 80003d6:	0c1c      	lsrs	r4, r3, #16
 80003d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1a0>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f2:	f080 809c 	bcs.w	800052e <__udivmoddi4+0x2ce>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f240 8099 	bls.w	800052e <__udivmoddi4+0x2ce>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	eba4 040e 	sub.w	r4, r4, lr
 8000404:	fa1f fe83 	uxth.w	lr, r3
 8000408:	fbb4 f3f9 	udiv	r3, r4, r9
 800040c:	fb09 4413 	mls	r4, r9, r3, r4
 8000410:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000414:	fb03 fc0c 	mul.w	ip, r3, ip
 8000418:	45a4      	cmp	ip, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x1ce>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000422:	f080 8082 	bcs.w	800052a <__udivmoddi4+0x2ca>
 8000426:	45a4      	cmp	ip, r4
 8000428:	d97f      	bls.n	800052a <__udivmoddi4+0x2ca>
 800042a:	3b02      	subs	r3, #2
 800042c:	443c      	add	r4, r7
 800042e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000432:	eba4 040c 	sub.w	r4, r4, ip
 8000436:	fba0 ec02 	umull	lr, ip, r0, r2
 800043a:	4564      	cmp	r4, ip
 800043c:	4673      	mov	r3, lr
 800043e:	46e1      	mov	r9, ip
 8000440:	d362      	bcc.n	8000508 <__udivmoddi4+0x2a8>
 8000442:	d05f      	beq.n	8000504 <__udivmoddi4+0x2a4>
 8000444:	b15d      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000446:	ebb8 0203 	subs.w	r2, r8, r3
 800044a:	eb64 0409 	sbc.w	r4, r4, r9
 800044e:	fa04 f606 	lsl.w	r6, r4, r6
 8000452:	fa22 f301 	lsr.w	r3, r2, r1
 8000456:	431e      	orrs	r6, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 6400 	strd	r6, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e74f      	b.n	8000302 <__udivmoddi4+0xa2>
 8000462:	fbb1 fcf2 	udiv	ip, r1, r2
 8000466:	0c01      	lsrs	r1, r0, #16
 8000468:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800046c:	b280      	uxth	r0, r0
 800046e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000472:	463b      	mov	r3, r7
 8000474:	4638      	mov	r0, r7
 8000476:	463c      	mov	r4, r7
 8000478:	46b8      	mov	r8, r7
 800047a:	46be      	mov	lr, r7
 800047c:	2620      	movs	r6, #32
 800047e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000482:	eba2 0208 	sub.w	r2, r2, r8
 8000486:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048a:	e766      	b.n	800035a <__udivmoddi4+0xfa>
 800048c:	4601      	mov	r1, r0
 800048e:	e718      	b.n	80002c2 <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e72c      	b.n	80002ee <__udivmoddi4+0x8e>
 8000494:	f1c6 0220 	rsb	r2, r6, #32
 8000498:	fa2e f302 	lsr.w	r3, lr, r2
 800049c:	40b7      	lsls	r7, r6
 800049e:	40b1      	lsls	r1, r6
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	430a      	orrs	r2, r1
 80004aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ae:	b2bc      	uxth	r4, r7
 80004b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ba:	fb08 f904 	mul.w	r9, r8, r4
 80004be:	40b0      	lsls	r0, r6
 80004c0:	4589      	cmp	r9, r1
 80004c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c6:	b280      	uxth	r0, r0
 80004c8:	d93e      	bls.n	8000548 <__udivmoddi4+0x2e8>
 80004ca:	1879      	adds	r1, r7, r1
 80004cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d0:	d201      	bcs.n	80004d6 <__udivmoddi4+0x276>
 80004d2:	4589      	cmp	r9, r1
 80004d4:	d81f      	bhi.n	8000516 <__udivmoddi4+0x2b6>
 80004d6:	eba1 0109 	sub.w	r1, r1, r9
 80004da:	fbb1 f9fe 	udiv	r9, r1, lr
 80004de:	fb09 f804 	mul.w	r8, r9, r4
 80004e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2e4>
 80004f0:	18ba      	adds	r2, r7, r2
 80004f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f6:	d2c4      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004f8:	4542      	cmp	r2, r8
 80004fa:	d2c2      	bcs.n	8000482 <__udivmoddi4+0x222>
 80004fc:	f1a9 0102 	sub.w	r1, r9, #2
 8000500:	443a      	add	r2, r7
 8000502:	e7be      	b.n	8000482 <__udivmoddi4+0x222>
 8000504:	45f0      	cmp	r8, lr
 8000506:	d29d      	bcs.n	8000444 <__udivmoddi4+0x1e4>
 8000508:	ebbe 0302 	subs.w	r3, lr, r2
 800050c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000510:	3801      	subs	r0, #1
 8000512:	46e1      	mov	r9, ip
 8000514:	e796      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000516:	eba7 0909 	sub.w	r9, r7, r9
 800051a:	4449      	add	r1, r9
 800051c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000520:	fbb1 f9fe 	udiv	r9, r1, lr
 8000524:	fb09 f804 	mul.w	r8, r9, r4
 8000528:	e7db      	b.n	80004e2 <__udivmoddi4+0x282>
 800052a:	4673      	mov	r3, lr
 800052c:	e77f      	b.n	800042e <__udivmoddi4+0x1ce>
 800052e:	4650      	mov	r0, sl
 8000530:	e766      	b.n	8000400 <__udivmoddi4+0x1a0>
 8000532:	4608      	mov	r0, r1
 8000534:	e6fd      	b.n	8000332 <__udivmoddi4+0xd2>
 8000536:	443b      	add	r3, r7
 8000538:	3a02      	subs	r2, #2
 800053a:	e733      	b.n	80003a4 <__udivmoddi4+0x144>
 800053c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000540:	443b      	add	r3, r7
 8000542:	e71c      	b.n	800037e <__udivmoddi4+0x11e>
 8000544:	4649      	mov	r1, r9
 8000546:	e79c      	b.n	8000482 <__udivmoddi4+0x222>
 8000548:	eba1 0109 	sub.w	r1, r1, r9
 800054c:	46c4      	mov	ip, r8
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	e7c4      	b.n	80004e2 <__udivmoddi4+0x282>

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <Get_Sum_Bitwise>:
//			HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) + HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) +
//			HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) + HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7));
//}

static uint8_t Get_Sum_Bitwise(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
	uint8_t sum= 0;
 8000562:	2300      	movs	r3, #0
 8000564:	71fb      	strb	r3, [r7, #7]

	sum |= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000566:	2101      	movs	r1, #1
 8000568:	4830      	ldr	r0, [pc, #192]	@ (800062c <Get_Sum_Bitwise+0xd0>)
 800056a:	f001 f8ab 	bl	80016c4 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	461a      	mov	r2, r3
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	4313      	orrs	r3, r2
 8000576:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) << 1);
 8000578:	2102      	movs	r1, #2
 800057a:	482c      	ldr	r0, [pc, #176]	@ (800062c <Get_Sum_Bitwise+0xd0>)
 800057c:	f001 f8a2 	bl	80016c4 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	b25a      	sxtb	r2, r3
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	4313      	orrs	r3, r2
 800058c:	b25b      	sxtb	r3, r3
 800058e:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) << 2);
 8000590:	2104      	movs	r1, #4
 8000592:	4826      	ldr	r0, [pc, #152]	@ (800062c <Get_Sum_Bitwise+0xd0>)
 8000594:	f001 f896 	bl	80016c4 <HAL_GPIO_ReadPin>
 8000598:	4603      	mov	r3, r0
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	b25a      	sxtb	r2, r3
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	4313      	orrs	r3, r2
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) << 3);
 80005a8:	2108      	movs	r1, #8
 80005aa:	4820      	ldr	r0, [pc, #128]	@ (800062c <Get_Sum_Bitwise+0xd0>)
 80005ac:	f001 f88a 	bl	80016c4 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	b25a      	sxtb	r2, r3
 80005b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) << 4);
 80005c0:	2110      	movs	r1, #16
 80005c2:	481a      	ldr	r0, [pc, #104]	@ (800062c <Get_Sum_Bitwise+0xd0>)
 80005c4:	f001 f87e 	bl	80016c4 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	011b      	lsls	r3, r3, #4
 80005cc:	b25a      	sxtb	r2, r3
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) << 5);
 80005d8:	2120      	movs	r1, #32
 80005da:	4814      	ldr	r0, [pc, #80]	@ (800062c <Get_Sum_Bitwise+0xd0>)
 80005dc:	f001 f872 	bl	80016c4 <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	015b      	lsls	r3, r3, #5
 80005e4:	b25a      	sxtb	r2, r3
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) << 6);
 80005f0:	2140      	movs	r1, #64	@ 0x40
 80005f2:	480e      	ldr	r0, [pc, #56]	@ (800062c <Get_Sum_Bitwise+0xd0>)
 80005f4:	f001 f866 	bl	80016c4 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	019b      	lsls	r3, r3, #6
 80005fc:	b25a      	sxtb	r2, r3
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	4313      	orrs	r3, r2
 8000604:	b25b      	sxtb	r3, r3
 8000606:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) << 7);
 8000608:	2180      	movs	r1, #128	@ 0x80
 800060a:	4808      	ldr	r0, [pc, #32]	@ (800062c <Get_Sum_Bitwise+0xd0>)
 800060c:	f001 f85a 	bl	80016c4 <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	01db      	lsls	r3, r3, #7
 8000614:	b25a      	sxtb	r2, r3
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	4313      	orrs	r3, r2
 800061c:	b25b      	sxtb	r3, r3
 800061e:	71fb      	strb	r3, [r7, #7]

	return (sum);
 8000620:	79fb      	ldrb	r3, [r7, #7]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020000 	.word	0x40020000

08000630 <Blink_LED>:


static void Blink_LED(void)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0

	uint8_t state = Get_Sum_Bitwise();
 8000636:	f7ff ff91 	bl	800055c <Get_Sum_Bitwise>
 800063a:	4603      	mov	r3, r0
 800063c:	75fb      	strb	r3, [r7, #23]

	if (state > GPIO_PIN_COUNT) return ;
 800063e:	7dfb      	ldrb	r3, [r7, #23]
 8000640:	2b08      	cmp	r3, #8
 8000642:	d83c      	bhi.n	80006be <Blink_LED+0x8e>

	const uint16_t freq_arr[GPIO_PIN_COUNT + 1] = {BLINK_1000, BLINK_100, BLINK_50, BLINK_20, BLINK_10, BLINK_2, BLINK_1, 0, 0};
 8000644:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <Blink_LED+0x98>)
 8000646:	1d3c      	adds	r4, r7, #4
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	682b      	ldr	r3, [r5, #0]
 8000650:	8023      	strh	r3, [r4, #0]

	switch (state){
 8000652:	7dfb      	ldrb	r3, [r7, #23]
 8000654:	2b07      	cmp	r3, #7
 8000656:	d008      	beq.n	800066a <Blink_LED+0x3a>
 8000658:	2b08      	cmp	r3, #8
 800065a:	d10d      	bne.n	8000678 <Blink_LED+0x48>
	case 8:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000662:	481a      	ldr	r0, [pc, #104]	@ (80006cc <Blink_LED+0x9c>)
 8000664:	f001 f846 	bl	80016f4 <HAL_GPIO_WritePin>
		break;
 8000668:	e02a      	b.n	80006c0 <Blink_LED+0x90>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000670:	4816      	ldr	r0, [pc, #88]	@ (80006cc <Blink_LED+0x9c>)
 8000672:	f001 f83f 	bl	80016f4 <HAL_GPIO_WritePin>
		break;
 8000676:	e023      	b.n	80006c0 <Blink_LED+0x90>
	default:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800067e:	4813      	ldr	r0, [pc, #76]	@ (80006cc <Blink_LED+0x9c>)
 8000680:	f001 f838 	bl	80016f4 <HAL_GPIO_WritePin>
		HAL_Delay(freq_arr[GPIO_PIN_COUNT - state]);
 8000684:	7dfb      	ldrb	r3, [r7, #23]
 8000686:	f1c3 0308 	rsb	r3, r3, #8
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	3318      	adds	r3, #24
 800068e:	443b      	add	r3, r7
 8000690:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fc39 	bl	8000f0c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a0:	480a      	ldr	r0, [pc, #40]	@ (80006cc <Blink_LED+0x9c>)
 80006a2:	f001 f827 	bl	80016f4 <HAL_GPIO_WritePin>
		HAL_Delay(freq_arr[GPIO_PIN_COUNT - state]);
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	f1c3 0308 	rsb	r3, r3, #8
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	3318      	adds	r3, #24
 80006b0:	443b      	add	r3, r7
 80006b2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fc28 	bl	8000f0c <HAL_Delay>
 80006bc:	e000      	b.n	80006c0 <Blink_LED+0x90>
	if (state > GPIO_PIN_COUNT) return ;
 80006be:	bf00      	nop
	}
}
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bdb0      	pop	{r4, r5, r7, pc}
 80006c6:	bf00      	nop
 80006c8:	08003bcc 	.word	0x08003bcc
 80006cc:	40020400 	.word	0x40020400

080006d0 <Transmit_answer>:

static void Transmit_answer(char *buff)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint16_t size = strlen(buff) - 2;
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff fda1 	bl	8000220 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	3b02      	subs	r3, #2
 80006e4:	81fb      	strh	r3, [r7, #14]

  if (size <= 0){
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d041      	beq.n	8000770 <Transmit_answer+0xa0>
    return;
  }

  if (strncmp(buff, "help", size)) {
 80006ec:	89fb      	ldrh	r3, [r7, #14]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4921      	ldr	r1, [pc, #132]	@ (8000778 <Transmit_answer+0xa8>)
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f003 fa28 	bl	8003b48 <strncmp>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d00e      	beq.n	800071c <Transmit_answer+0x4c>
    HAL_UART_Transmit(&huart1, (uint8_t *)"led <on/off>\n", strlen("led <on/off>n"), 1000);
 80006fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000702:	220d      	movs	r2, #13
 8000704:	491d      	ldr	r1, [pc, #116]	@ (800077c <Transmit_answer+0xac>)
 8000706:	481e      	ldr	r0, [pc, #120]	@ (8000780 <Transmit_answer+0xb0>)
 8000708:	f002 f964 	bl	80029d4 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, (uint8_t *)"led mode <get/set/reset>\n", strlen("led mode <get/set/reset>\n"), 1000);
 800070c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000710:	2219      	movs	r2, #25
 8000712:	491c      	ldr	r1, [pc, #112]	@ (8000784 <Transmit_answer+0xb4>)
 8000714:	481a      	ldr	r0, [pc, #104]	@ (8000780 <Transmit_answer+0xb0>)
 8000716:	f002 f95d 	bl	80029d4 <HAL_UART_Transmit>
 800071a:	e02a      	b.n	8000772 <Transmit_answer+0xa2>
  } else if(strncmp(buff, "led on", size)){
 800071c:	89fb      	ldrh	r3, [r7, #14]
 800071e:	461a      	mov	r2, r3
 8000720:	4919      	ldr	r1, [pc, #100]	@ (8000788 <Transmit_answer+0xb8>)
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f003 fa10 	bl	8003b48 <strncmp>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d007      	beq.n	800073e <Transmit_answer+0x6e>
    HAL_UART_Transmit(&huart1, (uint8_t *)"led mode <get/set/reset>", strlen("led mode <get/set/reset>"), 1000);
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	2218      	movs	r2, #24
 8000734:	4915      	ldr	r1, [pc, #84]	@ (800078c <Transmit_answer+0xbc>)
 8000736:	4812      	ldr	r0, [pc, #72]	@ (8000780 <Transmit_answer+0xb0>)
 8000738:	f002 f94c 	bl	80029d4 <HAL_UART_Transmit>
 800073c:	e019      	b.n	8000772 <Transmit_answer+0xa2>
  } else if(strncmp(buff, "led off", size)){
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	461a      	mov	r2, r3
 8000742:	4913      	ldr	r1, [pc, #76]	@ (8000790 <Transmit_answer+0xc0>)
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f003 f9ff 	bl	8003b48 <strncmp>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d007      	beq.n	8000760 <Transmit_answer+0x90>
    HAL_UART_Transmit(&huart1, (uint8_t *)"led mode <get/set/reset>", strlen("led mode <get/set/reset>"), 1000);
 8000750:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000754:	2218      	movs	r2, #24
 8000756:	490d      	ldr	r1, [pc, #52]	@ (800078c <Transmit_answer+0xbc>)
 8000758:	4809      	ldr	r0, [pc, #36]	@ (8000780 <Transmit_answer+0xb0>)
 800075a:	f002 f93b 	bl	80029d4 <HAL_UART_Transmit>
 800075e:	e008      	b.n	8000772 <Transmit_answer+0xa2>
  } else {
    HAL_UART_Transmit(&huart1, (uint8_t *)"command not found\n", strlen("command not found\n"), 1000);
 8000760:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000764:	2212      	movs	r2, #18
 8000766:	490b      	ldr	r1, [pc, #44]	@ (8000794 <Transmit_answer+0xc4>)
 8000768:	4805      	ldr	r0, [pc, #20]	@ (8000780 <Transmit_answer+0xb0>)
 800076a:	f002 f933 	bl	80029d4 <HAL_UART_Transmit>
 800076e:	e000      	b.n	8000772 <Transmit_answer+0xa2>
    return;
 8000770:	bf00      	nop
  }
  // } else if(strncmp(buff, "led mode get ", size)){
  //   HAL_UART_Transmit(&huart1, "led mode <get/set/reset>", strlen("led mode <get/set/reset>"), 1000);
  // } 
  
}
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08003be0 	.word	0x08003be0
 800077c:	08003be8 	.word	0x08003be8
 8000780:	2000007c 	.word	0x2000007c
 8000784:	08003bf8 	.word	0x08003bf8
 8000788:	08003c14 	.word	0x08003c14
 800078c:	08003c1c 	.word	0x08003c1c
 8000790:	08003c38 	.word	0x08003c38
 8000794:	08003c40 	.word	0x08003c40

08000798 <Echo_UART>:

static void Echo_UART(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 800079e:	af00      	add	r7, sp, #0
  uint8_t buff[1024] = {0};
 80007a0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80007a4:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80007a8:	4618      	mov	r0, r3
 80007aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007ae:	461a      	mov	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f003 f9c1 	bl	8003b38 <memset>
  uint16_t iter = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

  while (1)
  {
    if (HAL_UART_Receive(&huart1, &buff[iter], 1, 1000) == HAL_OK){
 80007bc:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 80007c0:	1d3a      	adds	r2, r7, #4
 80007c2:	18d1      	adds	r1, r2, r3
 80007c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c8:	2201      	movs	r2, #1
 80007ca:	481e      	ldr	r0, [pc, #120]	@ (8000844 <Echo_UART+0xac>)
 80007cc:	f002 f98b 	bl	8002ae6 <HAL_UART_Receive>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f2      	bne.n	80007bc <Echo_UART+0x24>
      HAL_UART_Transmit(&huart1, &buff[iter++], 1, 1000);
 80007d6:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	f8a7 2406 	strh.w	r2, [r7, #1030]	@ 0x406
 80007e0:	461a      	mov	r2, r3
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	1899      	adds	r1, r3, r2
 80007e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ea:	2201      	movs	r2, #1
 80007ec:	4815      	ldr	r0, [pc, #84]	@ (8000844 <Echo_UART+0xac>)
 80007ee:	f002 f8f1 	bl	80029d4 <HAL_UART_Transmit>
      if (buff[iter] == 13){
 80007f2:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 80007f6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 80007fa:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 80007fe:	5cd3      	ldrb	r3, [r2, r3]
 8000800:	2b0d      	cmp	r3, #13
 8000802:	d119      	bne.n	8000838 <Echo_UART+0xa0>
        buff[iter] = 10;
 8000804:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000808:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 800080c:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000810:	210a      	movs	r1, #10
 8000812:	54d1      	strb	r1, [r2, r3]
        HAL_UART_Transmit(&huart1, &buff[iter++], 1, 1000);
 8000814:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	f8a7 2406 	strh.w	r2, [r7, #1030]	@ 0x406
 800081e:	461a      	mov	r2, r3
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	1899      	adds	r1, r3, r2
 8000824:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000828:	2201      	movs	r2, #1
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <Echo_UART+0xac>)
 800082c:	f002 f8d2 	bl	80029d4 <HAL_UART_Transmit>
        Transmit_answer((char *)buff);
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff4c 	bl	80006d0 <Transmit_answer>
      }
      break;
 8000838:	bf00      	nop
    }
  }
}
 800083a:	bf00      	nop
 800083c:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000007c 	.word	0x2000007c

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800084c:	f000 f972 	bl	8000b34 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000850:	f000 faff 	bl	8000e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000854:	f000 f80c 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000858:	f000 f8d6 	bl	8000a08 <MX_GPIO_Init>
  MX_I2C1_Init();
 800085c:	f000 f864 	bl	8000928 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000860:	f000 f8a2 	bl	80009a8 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Blink_LED();
 8000864:	f7ff fee4 	bl	8000630 <Blink_LED>
    Echo_UART();
 8000868:	f7ff ff96 	bl	8000798 <Echo_UART>
	  Blink_LED();
 800086c:	bf00      	nop
 800086e:	e7f9      	b.n	8000864 <main+0x1c>

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	@ 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	@ 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 f95a 	bl	8003b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <SystemClock_Config+0xb0>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	4a21      	ldr	r2, [pc, #132]	@ (8000920 <SystemClock_Config+0xb0>)
 800089a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089e:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <SystemClock_Config+0xb0>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <SystemClock_Config+0xb4>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000924 <SystemClock_Config+0xb4>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <SystemClock_Config+0xb4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d0:	2310      	movs	r3, #16
 80008d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 f857 	bl	8001990 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f950 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	230f      	movs	r3, #15
 80008ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fae6 	bl	8001ed8 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000912:	f000 f93b 	bl	8000b8c <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3750      	adds	r7, #80	@ 0x50
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_I2C1_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <MX_I2C1_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_I2C1_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	@ (80009a4 <MX_I2C1_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_I2C1_Init+0x74>)
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <MX_I2C1_Init+0x74>)
 8000964:	f000 fee0 	bl	8001728 <HAL_I2C_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096e:	f000 f90d 	bl	8000b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <MX_I2C1_Init+0x74>)
 8000976:	f000 ff73 	bl	8001860 <HAL_I2CEx_ConfigAnalogFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 f904 	bl	8000b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_I2C1_Init+0x74>)
 8000988:	f000 ffb5 	bl	80018f6 <HAL_I2CEx_ConfigDigitalFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 f8fb 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000028 	.word	0x20000028
 80009a0:	40005400 	.word	0x40005400
 80009a4:	00303d5b 	.word	0x00303d5b

080009a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	@ (8000a04 <MX_USART1_UART_Init+0x5c>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009b2:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_USART1_UART_Init+0x58>)
 80009ec:	f001 ffa4 	bl	8002938 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f8c9 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000007c 	.word	0x2000007c
 8000a04:	40011000 	.word	0x40011000

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b41      	ldr	r3, [pc, #260]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a40      	ldr	r2, [pc, #256]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a36:	4b3b      	ldr	r3, [pc, #236]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a3a      	ldr	r2, [pc, #232]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a3c:	f043 0304 	orr.w	r3, r3, #4
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b38      	ldr	r3, [pc, #224]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0304 	and.w	r3, r3, #4
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a34      	ldr	r2, [pc, #208]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b32      	ldr	r3, [pc, #200]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b2f      	ldr	r3, [pc, #188]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b2c      	ldr	r3, [pc, #176]	@ (8000b24 <MX_GPIO_Init+0x11c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210c      	movs	r1, #12
 8000a82:	4829      	ldr	r0, [pc, #164]	@ (8000b28 <MX_GPIO_Init+0x120>)
 8000a84:	f000 fe36 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a8e:	4827      	ldr	r0, [pc, #156]	@ (8000b2c <MX_GPIO_Init+0x124>)
 8000a90:	f000 fe30 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a94:	2304      	movs	r3, #4
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	481f      	ldr	r0, [pc, #124]	@ (8000b28 <MX_GPIO_Init+0x120>)
 8000aac:	f000 fc6e 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ab4:	2311      	movs	r3, #17
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4818      	ldr	r0, [pc, #96]	@ (8000b28 <MX_GPIO_Init+0x120>)
 8000ac8:	f000 fc60 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000acc:	23fe      	movs	r3, #254	@ 0xfe
 8000ace:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4814      	ldr	r0, [pc, #80]	@ (8000b30 <MX_GPIO_Init+0x128>)
 8000ae0:	f000 fc54 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ae4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	480b      	ldr	r0, [pc, #44]	@ (8000b2c <MX_GPIO_Init+0x124>)
 8000afe:	f000 fc45 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b02:	2310      	movs	r3, #16
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_GPIO_Init+0x124>)
 8000b16:	f000 fc39 	bl	800138c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020000 	.word	0x40020000

08000b34 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b46:	f000 fb17 	bl	8001178 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b56:	231f      	movs	r3, #31
 8000b58:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b5a:	2387      	movs	r3, #135	@ 0x87
 8000b5c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b62:	2300      	movs	r3, #0
 8000b64:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b66:	2301      	movs	r3, #1
 8000b68:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b76:	463b      	mov	r3, r7
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fb35 	bl	80011e8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b7e:	2004      	movs	r0, #4
 8000b80:	f000 fb12 	bl	80011a8 <HAL_MPU_Enable>

}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <Error_Handler+0x8>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <HAL_MspInit+0x44>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bdc <HAL_MspInit+0x44>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_MspInit+0x44>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b0aa      	sub	sp, #168	@ 0xa8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 ff99 	bl	8003b38 <memset>
  if(hi2c->Instance==I2C1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a21      	ldr	r2, [pc, #132]	@ (8000c90 <HAL_I2C_MspInit+0xb0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d13b      	bne.n	8000c88 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c14:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 fb40 	bl	80022a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c2a:	f7ff ffaf 	bl	8000b8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <HAL_I2C_MspInit+0xb4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a18      	ldr	r2, [pc, #96]	@ (8000c94 <HAL_I2C_MspInit+0xb4>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b16      	ldr	r3, [pc, #88]	@ (8000c94 <HAL_I2C_MspInit+0xb4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23c0      	movs	r3, #192	@ 0xc0
 8000c48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	2312      	movs	r3, #18
 8000c4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c5e:	2304      	movs	r3, #4
 8000c60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000c68:	4619      	mov	r1, r3
 8000c6a:	480b      	ldr	r0, [pc, #44]	@ (8000c98 <HAL_I2C_MspInit+0xb8>)
 8000c6c:	f000 fb8e 	bl	800138c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <HAL_I2C_MspInit+0xb4>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	4a07      	ldr	r2, [pc, #28]	@ (8000c94 <HAL_I2C_MspInit+0xb4>)
 8000c76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_I2C_MspInit+0xb4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c88:	bf00      	nop
 8000c8a:	37a8      	adds	r7, #168	@ 0xa8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40005400 	.word	0x40005400
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400

08000c9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0aa      	sub	sp, #168	@ 0xa8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 ff3b 	bl	8003b38 <memset>
  if(huart->Instance==USART1)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a25      	ldr	r2, [pc, #148]	@ (8000d5c <HAL_UART_MspInit+0xc0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d143      	bne.n	8000d54 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ccc:	2340      	movs	r3, #64	@ 0x40
 8000cce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fae3 	bl	80022a4 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce4:	f7ff ff52 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cec:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d04:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_UART_MspInit+0xc4>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d18:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d32:	2307      	movs	r3, #7
 8000d34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4809      	ldr	r0, [pc, #36]	@ (8000d64 <HAL_UART_MspInit+0xc8>)
 8000d40:	f000 fb24 	bl	800138c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2025      	movs	r0, #37	@ 0x25
 8000d4a:	f000 f9de 	bl	800110a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d4e:	2025      	movs	r0, #37	@ 0x25
 8000d50:	f000 f9f7 	bl	8001142 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d54:	bf00      	nop
 8000d56:	37a8      	adds	r7, #168	@ 0xa8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40011000 	.word	0x40011000
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f000 f885 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <USART1_IRQHandler+0x10>)
 8000dce:	f001 ff53 	bl	8002c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000007c 	.word	0x2000007c

08000ddc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000e04:	f7ff ffea 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f002 fe9d 	bl	8003b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fd09 	bl	8000848 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e38:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e44:	08003c7c 	.word	0x08003c7c
  ldr r2, =_sbss
 8000e48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e4c:	20000108 	.word	0x20000108

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>

08000e52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f000 f94c 	bl	80010f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5c:	200f      	movs	r0, #15
 8000e5e:	f000 f805 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e62:	f7ff fe99 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <HAL_InitTick+0x54>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x58>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f967 	bl	800115e <HAL_SYSTICK_Config>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00e      	b.n	8000eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d80a      	bhi.n	8000eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	f000 f92f 	bl	800110a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <HAL_InitTick+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	20000004 	.word	0x20000004

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000104 	.word	0x20000104

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	@ (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000104 	.word	0x20000104

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ffee 	bl	8000ef4 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffde 	bl	8000ef4 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x40>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	@ (8000f94 <__NVIC_SetPriorityGrouping+0x40>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed00 	.word	0xe000ed00
 8000f98:	05fa0000 	.word	0x05fa0000

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4907      	ldr	r1, [pc, #28]	@ (8000ff0 <__NVIC_EnableIRQ+0x38>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	@ (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	@ (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	@ 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	@ 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ff8e 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ff29 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800110a:	b580      	push	{r7, lr}
 800110c:	b086      	sub	sp, #24
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800111c:	f7ff ff3e 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 8001120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff ff8e 	bl	8001048 <NVIC_EncodePriority>
 800112c:	4602      	mov	r2, r0
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff5d 	bl	8000ff4 <__NVIC_SetPriority>
}
 800113a:	bf00      	nop
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff31 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffa2 	bl	80010b0 <SysTick_Config>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800117c:	f3bf 8f5f 	dmb	sy
}
 8001180:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <HAL_MPU_Disable+0x28>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001186:	4a06      	ldr	r2, [pc, #24]	@ (80011a0 <HAL_MPU_Disable+0x28>)
 8001188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800118c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800118e:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_MPU_Disable+0x2c>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	e000ed90 	.word	0xe000ed90

080011a8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011b0:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_MPU_Enable+0x38>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	@ (80011e4 <HAL_MPU_Enable+0x3c>)
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	4a09      	ldr	r2, [pc, #36]	@ (80011e4 <HAL_MPU_Enable+0x3c>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011c6:	f3bf 8f4f 	dsb	sy
}
 80011ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011cc:	f3bf 8f6f 	isb	sy
}
 80011d0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000ed90 	.word	0xe000ed90
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	785a      	ldrb	r2, [r3, #1]
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <HAL_MPU_ConfigRegion+0x7c>)
 80011f6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_MPU_ConfigRegion+0x7c>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	4a19      	ldr	r2, [pc, #100]	@ (8001264 <HAL_MPU_ConfigRegion+0x7c>)
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001204:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <HAL_MPU_ConfigRegion+0x7c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7b1b      	ldrb	r3, [r3, #12]
 8001210:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7adb      	ldrb	r3, [r3, #11]
 8001216:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001218:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7a9b      	ldrb	r3, [r3, #10]
 800121e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001220:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7b5b      	ldrb	r3, [r3, #13]
 8001226:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001228:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7b9b      	ldrb	r3, [r3, #14]
 800122e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001230:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7bdb      	ldrb	r3, [r3, #15]
 8001236:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001238:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	7a5b      	ldrb	r3, [r3, #9]
 800123e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001240:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	7a1b      	ldrb	r3, [r3, #8]
 8001246:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001248:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001252:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001254:	6113      	str	r3, [r2, #16]
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed90 	.word	0xe000ed90

08001268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001274:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001276:	f7ff fe3d 	bl	8000ef4 <HAL_GetTick>
 800127a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d008      	beq.n	800129a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2280      	movs	r2, #128	@ 0x80
 800128c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e052      	b.n	8001340 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0216 	bic.w	r2, r2, #22
 80012a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	695a      	ldr	r2, [r3, #20]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <HAL_DMA_Abort+0x62>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0208 	bic.w	r2, r2, #8
 80012d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0201 	bic.w	r2, r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ea:	e013      	b.n	8001314 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ec:	f7ff fe02 	bl	8000ef4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	d90c      	bls.n	8001314 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2220      	movs	r2, #32
 80012fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2203      	movs	r2, #3
 8001304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e015      	b.n	8001340 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1e4      	bne.n	80012ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001326:	223f      	movs	r2, #63	@ 0x3f
 8001328:	409a      	lsls	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d004      	beq.n	8001366 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2280      	movs	r2, #128	@ 0x80
 8001360:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00c      	b.n	8001380 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2205      	movs	r2, #5
 800136a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0201 	bic.w	r2, r2, #1
 800137c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	@ 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e169      	b.n	8001680 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8158 	bne.w	800167a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d005      	beq.n	80013e2 <HAL_GPIO_Init+0x56>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d130      	bne.n	8001444 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b03      	cmp	r3, #3
 800144e:	d017      	beq.n	8001480 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80b2 	beq.w	800167a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b60      	ldr	r3, [pc, #384]	@ (8001698 <HAL_GPIO_Init+0x30c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	4a5f      	ldr	r2, [pc, #380]	@ (8001698 <HAL_GPIO_Init+0x30c>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001520:	6453      	str	r3, [r2, #68]	@ 0x44
 8001522:	4b5d      	ldr	r3, [pc, #372]	@ (8001698 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800152e:	4a5b      	ldr	r2, [pc, #364]	@ (800169c <HAL_GPIO_Init+0x310>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a52      	ldr	r2, [pc, #328]	@ (80016a0 <HAL_GPIO_Init+0x314>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d02b      	beq.n	80015b2 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a51      	ldr	r2, [pc, #324]	@ (80016a4 <HAL_GPIO_Init+0x318>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d025      	beq.n	80015ae <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a50      	ldr	r2, [pc, #320]	@ (80016a8 <HAL_GPIO_Init+0x31c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01f      	beq.n	80015aa <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4f      	ldr	r2, [pc, #316]	@ (80016ac <HAL_GPIO_Init+0x320>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x21a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4e      	ldr	r2, [pc, #312]	@ (80016b0 <HAL_GPIO_Init+0x324>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x216>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4d      	ldr	r2, [pc, #308]	@ (80016b4 <HAL_GPIO_Init+0x328>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x212>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4c      	ldr	r2, [pc, #304]	@ (80016b8 <HAL_GPIO_Init+0x32c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x20e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4b      	ldr	r2, [pc, #300]	@ (80016bc <HAL_GPIO_Init+0x330>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x20a>
 8001592:	2307      	movs	r3, #7
 8001594:	e00e      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 8001596:	2308      	movs	r3, #8
 8001598:	e00c      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 800159a:	2306      	movs	r3, #6
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 800159e:	2305      	movs	r3, #5
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x228>
 80015b2:	2300      	movs	r3, #0
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	@ (800169c <HAL_GPIO_Init+0x310>)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a32      	ldr	r2, [pc, #200]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a27      	ldr	r2, [pc, #156]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001626:	4b26      	ldr	r3, [pc, #152]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164a:	4a1d      	ldr	r2, [pc, #116]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001674:	4a12      	ldr	r2, [pc, #72]	@ (80016c0 <HAL_GPIO_Init+0x334>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3301      	adds	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f67f ae92 	bls.w	80013ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3724      	adds	r7, #36	@ 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40021400 	.word	0x40021400
 80016b8:	40021800 	.word	0x40021800
 80016bc:	40021c00 	.word	0x40021c00
 80016c0:	40013c00 	.word	0x40013c00

080016c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e001      	b.n	80016e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001710:	e003      	b.n	800171a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e08b      	b.n	8001852 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d106      	bne.n	8001754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fa46 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2224      	movs	r2, #36	@ 0x24
 8001758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001778:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001788:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	e006      	b.n	80017b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80017ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d108      	bne.n	80017ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	e007      	b.n	80017da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6859      	ldr	r1, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_I2C_Init+0x134>)
 80017e6:	430b      	orrs	r3, r1
 80017e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69d9      	ldr	r1, [r3, #28]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1a      	ldr	r2, [r3, #32]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0201 	orr.w	r2, r2, #1
 8001832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2220      	movs	r2, #32
 800183e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	02008000 	.word	0x02008000

08001860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b20      	cmp	r3, #32
 8001874:	d138      	bne.n	80018e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001880:	2302      	movs	r3, #2
 8001882:	e032      	b.n	80018ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2224      	movs	r2, #36	@ 0x24
 8001890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e000      	b.n	80018ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018e8:	2302      	movs	r3, #2
  }
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b085      	sub	sp, #20
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b20      	cmp	r3, #32
 800190a:	d139      	bne.n	8001980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001916:	2302      	movs	r3, #2
 8001918:	e033      	b.n	8001982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2224      	movs	r2, #36	@ 0x24
 8001926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	e000      	b.n	8001982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001980:	2302      	movs	r3, #2
  }
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e291      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 8087 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b4:	4b96      	ldr	r3, [pc, #600]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d00c      	beq.n	80019da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c0:	4b93      	ldr	r3, [pc, #588]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d112      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62>
 80019cc:	4b90      	ldr	r3, [pc, #576]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019d8:	d10b      	bne.n	80019f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019da:	4b8d      	ldr	r3, [pc, #564]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d06c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x130>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d168      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e26b      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x7a>
 80019fc:	4b84      	ldr	r3, [pc, #528]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a83      	ldr	r2, [pc, #524]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e02e      	b.n	8001a68 <HAL_RCC_OscConfig+0xd8>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x9c>
 8001a12:	4b7f      	ldr	r3, [pc, #508]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7e      	ldr	r2, [pc, #504]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a7b      	ldr	r2, [pc, #492]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e01d      	b.n	8001a68 <HAL_RCC_OscConfig+0xd8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0xc0>
 8001a36:	4b76      	ldr	r3, [pc, #472]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a75      	ldr	r2, [pc, #468]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b73      	ldr	r3, [pc, #460]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a72      	ldr	r2, [pc, #456]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0xd8>
 8001a50:	4b6f      	ldr	r3, [pc, #444]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a6e      	ldr	r2, [pc, #440]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a6b      	ldr	r2, [pc, #428]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d013      	beq.n	8001a98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7ff fa40 	bl	8000ef4 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff fa3c 	bl	8000ef4 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	@ 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e21f      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	4b61      	ldr	r3, [pc, #388]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0xe8>
 8001a96:	e014      	b.n	8001ac2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff fa2c 	bl	8000ef4 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fa28 	bl	8000ef4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	@ 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e20b      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	4b57      	ldr	r3, [pc, #348]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x110>
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d069      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ace:	4b50      	ldr	r3, [pc, #320]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ada:	4b4d      	ldr	r3, [pc, #308]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d11c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x190>
 8001ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d116      	bne.n	8001b20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af2:	4b47      	ldr	r3, [pc, #284]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_OscConfig+0x17a>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e1df      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b41      	ldr	r3, [pc, #260]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	493d      	ldr	r1, [pc, #244]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	e040      	b.n	8001ba2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d023      	beq.n	8001b70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b28:	4b39      	ldr	r3, [pc, #228]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a38      	ldr	r2, [pc, #224]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f9de 	bl	8000ef4 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f9da 	bl	8000ef4 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1bd      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	4b30      	ldr	r3, [pc, #192]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4929      	ldr	r1, [pc, #164]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
 8001b6e:	e018      	b.n	8001ba2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b70:	4b27      	ldr	r3, [pc, #156]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a26      	ldr	r2, [pc, #152]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f9ba 	bl	8000ef4 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff f9b6 	bl	8000ef4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e199      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d038      	beq.n	8001c20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d019      	beq.n	8001bea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bba:	4a15      	ldr	r2, [pc, #84]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f997 	bl	8000ef4 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bca:	f7ff f993 	bl	8000ef4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e176      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x23a>
 8001be8:	e01a      	b.n	8001c20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001bec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bee:	4a08      	ldr	r2, [pc, #32]	@ (8001c10 <HAL_RCC_OscConfig+0x280>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf6:	f7ff f97d 	bl	8000ef4 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f979 	bl	8000ef4 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d903      	bls.n	8001c14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e15c      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
 8001c10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	4b91      	ldr	r3, [pc, #580]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80a4 	beq.w	8001d76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10d      	bne.n	8001c56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b88      	ldr	r3, [pc, #544]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a87      	ldr	r2, [pc, #540]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	4b85      	ldr	r3, [pc, #532]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c56:	4b82      	ldr	r3, [pc, #520]	@ (8001e60 <HAL_RCC_OscConfig+0x4d0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c62:	4b7f      	ldr	r3, [pc, #508]	@ (8001e60 <HAL_RCC_OscConfig+0x4d0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a7e      	ldr	r2, [pc, #504]	@ (8001e60 <HAL_RCC_OscConfig+0x4d0>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff f941 	bl	8000ef4 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff f93d 	bl	8000ef4 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	@ 0x64
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e120      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c88:	4b75      	ldr	r3, [pc, #468]	@ (8001e60 <HAL_RCC_OscConfig+0x4d0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x31a>
 8001c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca0:	4a6e      	ldr	r2, [pc, #440]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca8:	e02d      	b.n	8001d06 <HAL_RCC_OscConfig+0x376>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x33c>
 8001cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb6:	4a69      	ldr	r2, [pc, #420]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cbe:	4b67      	ldr	r3, [pc, #412]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc2:	4a66      	ldr	r2, [pc, #408]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cca:	e01c      	b.n	8001d06 <HAL_RCC_OscConfig+0x376>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x35e>
 8001cd4:	4b61      	ldr	r3, [pc, #388]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd8:	4a60      	ldr	r2, [pc, #384]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cec:	e00b      	b.n	8001d06 <HAL_RCC_OscConfig+0x376>
 8001cee:	4b5b      	ldr	r3, [pc, #364]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cfa:	4b58      	ldr	r3, [pc, #352]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfe:	4a57      	ldr	r2, [pc, #348]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d015      	beq.n	8001d3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0e:	f7ff f8f1 	bl	8000ef4 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff f8ed 	bl	8000ef4 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0ce      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ee      	beq.n	8001d16 <HAL_RCC_OscConfig+0x386>
 8001d38:	e014      	b.n	8001d64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f8db 	bl	8000ef4 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff f8d7 	bl	8000ef4 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0b8      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	4b40      	ldr	r3, [pc, #256]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ee      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d105      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	4a3b      	ldr	r2, [pc, #236]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80a4 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d80:	4b36      	ldr	r3, [pc, #216]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d06b      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d149      	bne.n	8001e28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a30      	ldr	r2, [pc, #192]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f8a8 	bl	8000ef4 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f8a4 	bl	8000ef4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e087      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	019b      	lsls	r3, r3, #6
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	3b01      	subs	r3, #1
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	4313      	orrs	r3, r2
 8001dec:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001dee:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001df2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df4:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001dfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7ff f878 	bl	8000ef4 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff f874 	bl	8000ef4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e057      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x478>
 8001e26:	e04f      	b.n	8001ec8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff f85e 	bl	8000ef4 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff f85a 	bl	8000ef4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e03d      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	4b03      	ldr	r3, [pc, #12]	@ (8001e5c <HAL_RCC_OscConfig+0x4cc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4ac>
 8001e5a:	e035      	b.n	8001ec8 <HAL_RCC_OscConfig+0x538>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_RCC_OscConfig+0x544>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d028      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d121      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d11a      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d111      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	3b01      	subs	r3, #1
 8001eae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0d0      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b67      	ldr	r3, [pc, #412]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 020f 	bic.w	r2, r3, #15
 8001f06:	4965      	ldr	r1, [pc, #404]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b63      	ldr	r3, [pc, #396]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0b8      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f38:	4b59      	ldr	r3, [pc, #356]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a58      	ldr	r2, [pc, #352]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f50:	4b53      	ldr	r3, [pc, #332]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a52      	ldr	r2, [pc, #328]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b50      	ldr	r3, [pc, #320]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	494d      	ldr	r1, [pc, #308]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d040      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b47      	ldr	r3, [pc, #284]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4b41      	ldr	r3, [pc, #260]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e073      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06b      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4936      	ldr	r1, [pc, #216]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fcc:	f7fe ff92 	bl	8000ef4 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7fe ff8e 	bl	8000ef4 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e053      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b2d      	ldr	r3, [pc, #180]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d210      	bcs.n	800202c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 020f 	bic.w	r2, r3, #15
 8002012:	4922      	ldr	r1, [pc, #136]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b20      	ldr	r3, [pc, #128]	@ (800209c <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e032      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002038:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4916      	ldr	r1, [pc, #88]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002056:	4b12      	ldr	r3, [pc, #72]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	490e      	ldr	r1, [pc, #56]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800206a:	f000 f821 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 800206e:	4602      	mov	r2, r0
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	490a      	ldr	r1, [pc, #40]	@ (80020a4 <HAL_RCC_ClockConfig+0x1cc>)
 800207c:	5ccb      	ldrb	r3, [r1, r3]
 800207e:	fa22 f303 	lsr.w	r3, r2, r3
 8002082:	4a09      	ldr	r2, [pc, #36]	@ (80020a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_RCC_ClockConfig+0x1d4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe feee 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08003c54 	.word	0x08003c54
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020b4:	b090      	sub	sp, #64	@ 0x40
 80020b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80020bc:	2300      	movs	r3, #0
 80020be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020c0:	2300      	movs	r3, #0
 80020c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020c8:	4b59      	ldr	r3, [pc, #356]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d00d      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x40>
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	f200 80a1 	bhi.w	800221c <HAL_RCC_GetSysClockFreq+0x16c>
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x34>
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x3a>
 80020e2:	e09b      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020e4:	4b53      	ldr	r3, [pc, #332]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x184>)
 80020e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020e8:	e09b      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ea:	4b53      	ldr	r3, [pc, #332]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x188>)
 80020ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020ee:	e098      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f0:	4b4f      	ldr	r3, [pc, #316]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x180>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020fa:	4b4d      	ldr	r3, [pc, #308]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x180>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d028      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002106:	4b4a      	ldr	r3, [pc, #296]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x180>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	099b      	lsrs	r3, r3, #6
 800210c:	2200      	movs	r2, #0
 800210e:	623b      	str	r3, [r7, #32]
 8002110:	627a      	str	r2, [r7, #36]	@ 0x24
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002118:	2100      	movs	r1, #0
 800211a:	4b47      	ldr	r3, [pc, #284]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x188>)
 800211c:	fb03 f201 	mul.w	r2, r3, r1
 8002120:	2300      	movs	r3, #0
 8002122:	fb00 f303 	mul.w	r3, r0, r3
 8002126:	4413      	add	r3, r2
 8002128:	4a43      	ldr	r2, [pc, #268]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x188>)
 800212a:	fba0 1202 	umull	r1, r2, r0, r2
 800212e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002130:	460a      	mov	r2, r1
 8002132:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002136:	4413      	add	r3, r2
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800213a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213c:	2200      	movs	r2, #0
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	61fa      	str	r2, [r7, #28]
 8002142:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002146:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800214a:	f7fe f871 	bl	8000230 <__aeabi_uldivmod>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4613      	mov	r3, r2
 8002154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002156:	e053      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002158:	4b35      	ldr	r3, [pc, #212]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x180>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	099b      	lsrs	r3, r3, #6
 800215e:	2200      	movs	r2, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	617a      	str	r2, [r7, #20]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800216a:	f04f 0b00 	mov.w	fp, #0
 800216e:	4652      	mov	r2, sl
 8002170:	465b      	mov	r3, fp
 8002172:	f04f 0000 	mov.w	r0, #0
 8002176:	f04f 0100 	mov.w	r1, #0
 800217a:	0159      	lsls	r1, r3, #5
 800217c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002180:	0150      	lsls	r0, r2, #5
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	ebb2 080a 	subs.w	r8, r2, sl
 800218a:	eb63 090b 	sbc.w	r9, r3, fp
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800219a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800219e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021a2:	ebb2 0408 	subs.w	r4, r2, r8
 80021a6:	eb63 0509 	sbc.w	r5, r3, r9
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	00eb      	lsls	r3, r5, #3
 80021b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b8:	00e2      	lsls	r2, r4, #3
 80021ba:	4614      	mov	r4, r2
 80021bc:	461d      	mov	r5, r3
 80021be:	eb14 030a 	adds.w	r3, r4, sl
 80021c2:	603b      	str	r3, [r7, #0]
 80021c4:	eb45 030b 	adc.w	r3, r5, fp
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021d6:	4629      	mov	r1, r5
 80021d8:	028b      	lsls	r3, r1, #10
 80021da:	4621      	mov	r1, r4
 80021dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021e0:	4621      	mov	r1, r4
 80021e2:	028a      	lsls	r2, r1, #10
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ea:	2200      	movs	r2, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	60fa      	str	r2, [r7, #12]
 80021f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021f4:	f7fe f81c 	bl	8000230 <__aeabi_uldivmod>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4613      	mov	r3, r2
 80021fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x180>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	3301      	adds	r3, #1
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002210:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800221a:	e002      	b.n	8002222 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x184>)
 800221e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002224:	4618      	mov	r0, r3
 8002226:	3740      	adds	r7, #64	@ 0x40
 8002228:	46bd      	mov	sp, r7
 800222a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	00f42400 	.word	0x00f42400
 8002238:	017d7840 	.word	0x017d7840

0800223c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <HAL_RCC_GetHCLKFreq+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000000 	.word	0x20000000

08002254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002258:	f7ff fff0 	bl	800223c <HAL_RCC_GetHCLKFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	0a9b      	lsrs	r3, r3, #10
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	4903      	ldr	r1, [pc, #12]	@ (8002278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	08003c64 	.word	0x08003c64

0800227c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002280:	f7ff ffdc 	bl	800223c <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b05      	ldr	r3, [pc, #20]	@ (800229c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	0b5b      	lsrs	r3, r3, #13
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4903      	ldr	r1, [pc, #12]	@ (80022a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40023800 	.word	0x40023800
 80022a0:	08003c64 	.word	0x08003c64

080022a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d012      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022c8:	4b65      	ldr	r3, [pc, #404]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a64      	ldr	r2, [pc, #400]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022ce:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80022d2:	6093      	str	r3, [r2, #8]
 80022d4:	4b62      	ldr	r3, [pc, #392]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022dc:	4960      	ldr	r1, [pc, #384]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d017      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022fa:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002300:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002308:	4955      	ldr	r1, [pc, #340]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002318:	d101      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800231a:	2301      	movs	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d017      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002336:	4b4a      	ldr	r3, [pc, #296]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002338:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800233c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002344:	4946      	ldr	r1, [pc, #280]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002350:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002354:	d101      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8002356:	2301      	movs	r3, #1
 8002358:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8002362:	2301      	movs	r3, #1
 8002364:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0320 	and.w	r3, r3, #32
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 808b 	beq.w	800248a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	4b3a      	ldr	r3, [pc, #232]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	4a39      	ldr	r2, [pc, #228]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800237a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800237e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002380:	4b37      	ldr	r3, [pc, #220]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800238c:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a34      	ldr	r2, [pc, #208]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002398:	f7fe fdac 	bl	8000ef4 <HAL_GetTick>
 800239c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a0:	f7fe fda8 	bl	8000ef4 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	@ 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e2bc      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023be:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d035      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d02e      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023dc:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023fe:	4a18      	ldr	r2, [pc, #96]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002404:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d114      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7fe fd70 	bl	8000ef4 <HAL_GetTick>
 8002414:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002416:	e00a      	b.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7fe fd6c 	bl	8000ef4 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e27e      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242e:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0ee      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002446:	d111      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002456:	400b      	ands	r3, r1
 8002458:	4901      	ldr	r1, [pc, #4]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
 800245e:	e00b      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002460:	40023800 	.word	0x40023800
 8002464:	40007000 	.word	0x40007000
 8002468:	0ffffcff 	.word	0x0ffffcff
 800246c:	4ba4      	ldr	r3, [pc, #656]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4aa3      	ldr	r2, [pc, #652]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002472:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002476:	6093      	str	r3, [r2, #8]
 8002478:	4ba1      	ldr	r3, [pc, #644]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800247a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	499e      	ldr	r1, [pc, #632]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002486:	4313      	orrs	r3, r2
 8002488:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d010      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002496:	4b9a      	ldr	r3, [pc, #616]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800249c:	4a98      	ldr	r2, [pc, #608]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800249e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024a6:	4b96      	ldr	r3, [pc, #600]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b0:	4993      	ldr	r1, [pc, #588]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d2:	498b      	ldr	r1, [pc, #556]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024e6:	4b86      	ldr	r3, [pc, #536]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f4:	4982      	ldr	r1, [pc, #520]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002508:	4b7d      	ldr	r3, [pc, #500]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002516:	497a      	ldr	r1, [pc, #488]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800252a:	4b75      	ldr	r3, [pc, #468]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002530:	f023 0203 	bic.w	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002538:	4971      	ldr	r1, [pc, #452]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800254c:	4b6c      	ldr	r3, [pc, #432]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002552:	f023 020c 	bic.w	r2, r3, #12
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	4969      	ldr	r1, [pc, #420]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800256e:	4b64      	ldr	r3, [pc, #400]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002574:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257c:	4960      	ldr	r1, [pc, #384]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002590:	4b5b      	ldr	r3, [pc, #364]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002596:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800259e:	4958      	ldr	r1, [pc, #352]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025b2:	4b53      	ldr	r3, [pc, #332]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	494f      	ldr	r1, [pc, #316]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e2:	4947      	ldr	r1, [pc, #284]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025f6:	4b42      	ldr	r3, [pc, #264]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	493e      	ldr	r1, [pc, #248]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002618:	4b39      	ldr	r3, [pc, #228]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	4936      	ldr	r1, [pc, #216]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d011      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800263a:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002640:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002648:	492d      	ldr	r1, [pc, #180]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002658:	d101      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800265a:	2301      	movs	r3, #1
 800265c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800266a:	4b25      	ldr	r3, [pc, #148]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002670:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002678:	4921      	ldr	r1, [pc, #132]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800268c:	4b1c      	ldr	r3, [pc, #112]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002692:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800269a:	4919      	ldr	r1, [pc, #100]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80026ae:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026bc:	4910      	ldr	r1, [pc, #64]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d006      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 809d 	beq.w	8002812 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026d8:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a08      	ldr	r2, [pc, #32]	@ (8002700 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026e4:	f7fe fc06 	bl	8000ef4 <HAL_GetTick>
 80026e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ea:	e00b      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026ec:	f7fe fc02 	bl	8000ef4 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	@ 0x64
 80026f8:	d904      	bls.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e116      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x688>
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002704:	4b8b      	ldr	r3, [pc, #556]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ed      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d017      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d113      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002724:	4b83      	ldr	r3, [pc, #524]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800272a:	0e1b      	lsrs	r3, r3, #24
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	019a      	lsls	r2, r3, #6
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	071b      	lsls	r3, r3, #28
 8002744:	497b      	ldr	r1, [pc, #492]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800276a:	2b00      	cmp	r3, #0
 800276c:	d024      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002776:	d11f      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002778:	4b6e      	ldr	r3, [pc, #440]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800277a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800277e:	0f1b      	lsrs	r3, r3, #28
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	019a      	lsls	r2, r3, #6
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	431a      	orrs	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	071b      	lsls	r3, r3, #28
 8002798:	4966      	ldr	r1, [pc, #408]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027a0:	4b64      	ldr	r3, [pc, #400]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027a6:	f023 021f 	bic.w	r2, r3, #31
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	4960      	ldr	r1, [pc, #384]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00d      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	019a      	lsls	r2, r3, #6
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	061b      	lsls	r3, r3, #24
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	071b      	lsls	r3, r3, #28
 80027d8:	4956      	ldr	r1, [pc, #344]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027e0:	4b54      	ldr	r3, [pc, #336]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a53      	ldr	r2, [pc, #332]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe fb82 	bl	8000ef4 <HAL_GetTick>
 80027f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027f4:	f7fe fb7e 	bl	8000ef4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	@ 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e092      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002806:	4b4b      	ldr	r3, [pc, #300]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b01      	cmp	r3, #1
 8002816:	f040 8088 	bne.w	800292a <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800281a:	4b46      	ldr	r3, [pc, #280]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a45      	ldr	r2, [pc, #276]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002824:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002826:	f7fe fb65 	bl	8000ef4 <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800282e:	f7fe fb61 	bl	8000ef4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b64      	cmp	r3, #100	@ 0x64
 800283a:	d901      	bls.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e075      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002840:	4b3c      	ldr	r3, [pc, #240]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800284c:	d0ef      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800286a:	2b00      	cmp	r3, #0
 800286c:	d024      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002872:	2b00      	cmp	r3, #0
 8002874:	d120      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002876:	4b2f      	ldr	r3, [pc, #188]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	019a      	lsls	r2, r3, #6
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	4927      	ldr	r1, [pc, #156]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800289e:	4b25      	ldr	r3, [pc, #148]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028a4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	4920      	ldr	r1, [pc, #128]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d018      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028cc:	d113      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ce:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d4:	0e1b      	lsrs	r3, r3, #24
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	019a      	lsls	r2, r3, #6
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	041b      	lsls	r3, r3, #16
 80028e8:	431a      	orrs	r2, r3
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	4911      	ldr	r1, [pc, #68]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002902:	f7fe faf7 	bl	8000ef4 <HAL_GetTick>
 8002906:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800290a:	f7fe faf3 	bl	8000ef4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b64      	cmp	r3, #100	@ 0x64
 8002916:	d901      	bls.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e007      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002928:	d1ef      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e040      	b.n	80029cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe f99e 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2224      	movs	r2, #36	@ 0x24
 8002964:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0201 	bic.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fed0 	bl	8003724 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fc69 	bl	800325c <UART_SetConfig>
 800298a:	4603      	mov	r3, r0
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e01b      	b.n	80029cc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 ff4f 	bl	8003868 <UART_CheckIdleState>
 80029ca:	4603      	mov	r3, r0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	@ 0x28
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d177      	bne.n	8002adc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_UART_Transmit+0x24>
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e070      	b.n	8002ade <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2221      	movs	r2, #33	@ 0x21
 8002a08:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a0a:	f7fe fa73 	bl	8000ef4 <HAL_GetTick>
 8002a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	88fa      	ldrh	r2, [r7, #6]
 8002a14:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a28:	d108      	bne.n	8002a3c <HAL_UART_Transmit+0x68>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e003      	b.n	8002a44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a44:	e02f      	b.n	8002aa6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2180      	movs	r1, #128	@ 0x80
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 ff60 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d004      	beq.n	8002a66 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e03b      	b.n	8002ade <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	461a      	mov	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	3302      	adds	r3, #2
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e007      	b.n	8002a94 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3301      	adds	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1c9      	bne.n	8002a46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2140      	movs	r1, #64	@ 0x40
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 ff2a 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e005      	b.n	8002ade <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	e000      	b.n	8002ade <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
  }
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b08a      	sub	sp, #40	@ 0x28
 8002aea:	af02      	add	r7, sp, #8
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	603b      	str	r3, [r7, #0]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	f040 80b5 	bne.w	8002c6c <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_UART_Receive+0x28>
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e0ad      	b.n	8002c6e <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2222      	movs	r2, #34	@ 0x22
 8002b1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b28:	f7fe f9e4 	bl	8000ef4 <HAL_GetTick>
 8002b2c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	88fa      	ldrh	r2, [r7, #6]
 8002b32:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b46:	d10e      	bne.n	8002b66 <HAL_UART_Receive+0x80>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <HAL_UART_Receive+0x76>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002b56:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b5a:	e02d      	b.n	8002bb8 <HAL_UART_Receive+0xd2>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	22ff      	movs	r2, #255	@ 0xff
 8002b60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b64:	e028      	b.n	8002bb8 <HAL_UART_Receive+0xd2>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10d      	bne.n	8002b8a <HAL_UART_Receive+0xa4>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d104      	bne.n	8002b80 <HAL_UART_Receive+0x9a>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	22ff      	movs	r2, #255	@ 0xff
 8002b7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b7e:	e01b      	b.n	8002bb8 <HAL_UART_Receive+0xd2>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	227f      	movs	r2, #127	@ 0x7f
 8002b84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b88:	e016      	b.n	8002bb8 <HAL_UART_Receive+0xd2>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b92:	d10d      	bne.n	8002bb0 <HAL_UART_Receive+0xca>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <HAL_UART_Receive+0xc0>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	227f      	movs	r2, #127	@ 0x7f
 8002ba0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ba4:	e008      	b.n	8002bb8 <HAL_UART_Receive+0xd2>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	223f      	movs	r2, #63	@ 0x3f
 8002baa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002bae:	e003      	b.n	8002bb8 <HAL_UART_Receive+0xd2>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002bbe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc8:	d108      	bne.n	8002bdc <HAL_UART_Receive+0xf6>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d104      	bne.n	8002bdc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	e003      	b.n	8002be4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002be4:	e036      	b.n	8002c54 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2120      	movs	r1, #32
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fe90 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e032      	b.n	8002c6e <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10c      	bne.n	8002c28 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	8a7b      	ldrh	r3, [r7, #18]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	3302      	adds	r3, #2
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e00c      	b.n	8002c42 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	8a7b      	ldrh	r3, [r7, #18]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4013      	ands	r3, r2
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1c2      	bne.n	8002be6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e000      	b.n	8002c6e <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002c6c:	2302      	movs	r3, #2
  }
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b0ba      	sub	sp, #232	@ 0xe8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002ca2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002cac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d115      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00f      	beq.n	8002ce0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d009      	beq.n	8002ce0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8297 	beq.w	8003204 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	4798      	blx	r3
      }
      return;
 8002cde:	e291      	b.n	8003204 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ce0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8117 	beq.w	8002f18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002cf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002cfa:	4b85      	ldr	r3, [pc, #532]	@ (8002f10 <HAL_UART_IRQHandler+0x298>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 810a 	beq.w	8002f18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d011      	beq.n	8002d34 <HAL_UART_IRQHandler+0xbc>
 8002d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00b      	beq.n	8002d34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2201      	movs	r2, #1
 8002d22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d2a:	f043 0201 	orr.w	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d011      	beq.n	8002d64 <HAL_UART_IRQHandler+0xec>
 8002d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2202      	movs	r2, #2
 8002d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d5a:	f043 0204 	orr.w	r2, r3, #4
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d011      	beq.n	8002d94 <HAL_UART_IRQHandler+0x11c>
 8002d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2204      	movs	r2, #4
 8002d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d8a:	f043 0202 	orr.w	r2, r3, #2
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d017      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002db0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc6:	f043 0208 	orr.w	r2, r3, #8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d012      	beq.n	8002e02 <HAL_UART_IRQHandler+0x18a>
 8002ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002de0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00c      	beq.n	8002e02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002df0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 81fd 	beq.w	8003208 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4a:	2b40      	cmp	r3, #64	@ 0x40
 8002e4c:	d005      	beq.n	8002e5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d04f      	beq.n	8002efa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fdc8 	bl	80039f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6a:	2b40      	cmp	r3, #64	@ 0x40
 8002e6c:	d141      	bne.n	8002ef2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3308      	adds	r3, #8
 8002e74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3308      	adds	r3, #8
 8002e96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002eaa:	e841 2300 	strex	r3, r2, [r1]
 8002eae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1d9      	bne.n	8002e6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d013      	beq.n	8002eea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec6:	4a13      	ldr	r2, [pc, #76]	@ (8002f14 <HAL_UART_IRQHandler+0x29c>)
 8002ec8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fa3a 	bl	8001348 <HAL_DMA_Abort_IT>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d017      	beq.n	8002f0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	e00f      	b.n	8002f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9a0 	bl	8003230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef0:	e00b      	b.n	8002f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f99c 	bl	8003230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef8:	e007      	b.n	8002f0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f998 	bl	8003230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002f08:	e17e      	b.n	8003208 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0a:	bf00      	nop
    return;
 8002f0c:	e17c      	b.n	8003208 <HAL_UART_IRQHandler+0x590>
 8002f0e:	bf00      	nop
 8002f10:	04000120 	.word	0x04000120
 8002f14:	08003ab9 	.word	0x08003ab9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	f040 814c 	bne.w	80031ba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8145 	beq.w	80031ba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 813e 	beq.w	80031ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2210      	movs	r2, #16
 8002f44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f50:	2b40      	cmp	r3, #64	@ 0x40
 8002f52:	f040 80b6 	bne.w	80030c2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8150 	beq.w	800320c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002f72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f76:	429a      	cmp	r2, r3
 8002f78:	f080 8148 	bcs.w	800320c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f90:	f000 8086 	beq.w	80030a0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002fc2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002fca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1da      	bne.n	8002f94 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003002:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003006:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800300a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003014:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e1      	bne.n	8002fde <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3308      	adds	r3, #8
 8003020:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800302a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800302c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3308      	adds	r3, #8
 800303a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800303e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003040:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003044:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800304c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e3      	bne.n	800301a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800306e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003070:	f023 0310 	bic.w	r3, r3, #16
 8003074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003082:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003084:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003088:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e4      	bne.n	8003060 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe f8e4 	bl	8001268 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4619      	mov	r1, r3
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8c2 	bl	8003244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030c0:	e0a4      	b.n	800320c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8096 	beq.w	8003210 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80030e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8091 	beq.w	8003210 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f6:	e853 3f00 	ldrex	r3, [r3]
 80030fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003102:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	461a      	mov	r2, r3
 800310c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003110:	647b      	str	r3, [r7, #68]	@ 0x44
 8003112:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003118:	e841 2300 	strex	r3, r2, [r1]
 800311c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800311e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e4      	bne.n	80030ee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3308      	adds	r3, #8
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	e853 3f00 	ldrex	r3, [r3]
 8003132:	623b      	str	r3, [r7, #32]
   return(result);
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3308      	adds	r3, #8
 8003144:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003148:	633a      	str	r2, [r7, #48]	@ 0x30
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800314e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e3      	bne.n	8003124 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	60fb      	str	r3, [r7, #12]
   return(result);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f023 0310 	bic.w	r3, r3, #16
 8003184:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	617b      	str	r3, [r7, #20]
   return(result);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e4      	bne.n	8003170 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031b0:	4619      	mov	r1, r3
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f846 	bl	8003244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031b8:	e02a      	b.n	8003210 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80031ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00e      	beq.n	80031e4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80031c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01c      	beq.n	8003214 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
    }
    return;
 80031e2:	e017      	b.n	8003214 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d012      	beq.n	8003216 <HAL_UART_IRQHandler+0x59e>
 80031f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fc71 	bl	8003ae4 <UART_EndTransmit_IT>
    return;
 8003202:	e008      	b.n	8003216 <HAL_UART_IRQHandler+0x59e>
      return;
 8003204:	bf00      	nop
 8003206:	e006      	b.n	8003216 <HAL_UART_IRQHandler+0x59e>
    return;
 8003208:	bf00      	nop
 800320a:	e004      	b.n	8003216 <HAL_UART_IRQHandler+0x59e>
      return;
 800320c:	bf00      	nop
 800320e:	e002      	b.n	8003216 <HAL_UART_IRQHandler+0x59e>
      return;
 8003210:	bf00      	nop
 8003212:	e000      	b.n	8003216 <HAL_UART_IRQHandler+0x59e>
    return;
 8003214:	bf00      	nop
  }

}
 8003216:	37e8      	adds	r7, #232	@ 0xe8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	431a      	orrs	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4ba6      	ldr	r3, [pc, #664]	@ (8003520 <UART_SetConfig+0x2c4>)
 8003288:	4013      	ands	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	6979      	ldr	r1, [r7, #20]
 8003290:	430b      	orrs	r3, r1
 8003292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a94      	ldr	r2, [pc, #592]	@ (8003524 <UART_SetConfig+0x2c8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d120      	bne.n	800331a <UART_SetConfig+0xbe>
 80032d8:	4b93      	ldr	r3, [pc, #588]	@ (8003528 <UART_SetConfig+0x2cc>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d816      	bhi.n	8003314 <UART_SetConfig+0xb8>
 80032e6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <UART_SetConfig+0x90>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	080032fd 	.word	0x080032fd
 80032f0:	08003309 	.word	0x08003309
 80032f4:	08003303 	.word	0x08003303
 80032f8:	0800330f 	.word	0x0800330f
 80032fc:	2301      	movs	r3, #1
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e150      	b.n	80035a4 <UART_SetConfig+0x348>
 8003302:	2302      	movs	r3, #2
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e14d      	b.n	80035a4 <UART_SetConfig+0x348>
 8003308:	2304      	movs	r3, #4
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e14a      	b.n	80035a4 <UART_SetConfig+0x348>
 800330e:	2308      	movs	r3, #8
 8003310:	77fb      	strb	r3, [r7, #31]
 8003312:	e147      	b.n	80035a4 <UART_SetConfig+0x348>
 8003314:	2310      	movs	r3, #16
 8003316:	77fb      	strb	r3, [r7, #31]
 8003318:	e144      	b.n	80035a4 <UART_SetConfig+0x348>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a83      	ldr	r2, [pc, #524]	@ (800352c <UART_SetConfig+0x2d0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d132      	bne.n	800338a <UART_SetConfig+0x12e>
 8003324:	4b80      	ldr	r3, [pc, #512]	@ (8003528 <UART_SetConfig+0x2cc>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d828      	bhi.n	8003384 <UART_SetConfig+0x128>
 8003332:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <UART_SetConfig+0xdc>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800336d 	.word	0x0800336d
 800333c:	08003385 	.word	0x08003385
 8003340:	08003385 	.word	0x08003385
 8003344:	08003385 	.word	0x08003385
 8003348:	08003379 	.word	0x08003379
 800334c:	08003385 	.word	0x08003385
 8003350:	08003385 	.word	0x08003385
 8003354:	08003385 	.word	0x08003385
 8003358:	08003373 	.word	0x08003373
 800335c:	08003385 	.word	0x08003385
 8003360:	08003385 	.word	0x08003385
 8003364:	08003385 	.word	0x08003385
 8003368:	0800337f 	.word	0x0800337f
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
 8003370:	e118      	b.n	80035a4 <UART_SetConfig+0x348>
 8003372:	2302      	movs	r3, #2
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e115      	b.n	80035a4 <UART_SetConfig+0x348>
 8003378:	2304      	movs	r3, #4
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e112      	b.n	80035a4 <UART_SetConfig+0x348>
 800337e:	2308      	movs	r3, #8
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e10f      	b.n	80035a4 <UART_SetConfig+0x348>
 8003384:	2310      	movs	r3, #16
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e10c      	b.n	80035a4 <UART_SetConfig+0x348>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a68      	ldr	r2, [pc, #416]	@ (8003530 <UART_SetConfig+0x2d4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d120      	bne.n	80033d6 <UART_SetConfig+0x17a>
 8003394:	4b64      	ldr	r3, [pc, #400]	@ (8003528 <UART_SetConfig+0x2cc>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800339e:	2b30      	cmp	r3, #48	@ 0x30
 80033a0:	d013      	beq.n	80033ca <UART_SetConfig+0x16e>
 80033a2:	2b30      	cmp	r3, #48	@ 0x30
 80033a4:	d814      	bhi.n	80033d0 <UART_SetConfig+0x174>
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d009      	beq.n	80033be <UART_SetConfig+0x162>
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d810      	bhi.n	80033d0 <UART_SetConfig+0x174>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <UART_SetConfig+0x15c>
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d006      	beq.n	80033c4 <UART_SetConfig+0x168>
 80033b6:	e00b      	b.n	80033d0 <UART_SetConfig+0x174>
 80033b8:	2300      	movs	r3, #0
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e0f2      	b.n	80035a4 <UART_SetConfig+0x348>
 80033be:	2302      	movs	r3, #2
 80033c0:	77fb      	strb	r3, [r7, #31]
 80033c2:	e0ef      	b.n	80035a4 <UART_SetConfig+0x348>
 80033c4:	2304      	movs	r3, #4
 80033c6:	77fb      	strb	r3, [r7, #31]
 80033c8:	e0ec      	b.n	80035a4 <UART_SetConfig+0x348>
 80033ca:	2308      	movs	r3, #8
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e0e9      	b.n	80035a4 <UART_SetConfig+0x348>
 80033d0:	2310      	movs	r3, #16
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e0e6      	b.n	80035a4 <UART_SetConfig+0x348>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a56      	ldr	r2, [pc, #344]	@ (8003534 <UART_SetConfig+0x2d8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d120      	bne.n	8003422 <UART_SetConfig+0x1c6>
 80033e0:	4b51      	ldr	r3, [pc, #324]	@ (8003528 <UART_SetConfig+0x2cc>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80033ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80033ec:	d013      	beq.n	8003416 <UART_SetConfig+0x1ba>
 80033ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80033f0:	d814      	bhi.n	800341c <UART_SetConfig+0x1c0>
 80033f2:	2b80      	cmp	r3, #128	@ 0x80
 80033f4:	d009      	beq.n	800340a <UART_SetConfig+0x1ae>
 80033f6:	2b80      	cmp	r3, #128	@ 0x80
 80033f8:	d810      	bhi.n	800341c <UART_SetConfig+0x1c0>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <UART_SetConfig+0x1a8>
 80033fe:	2b40      	cmp	r3, #64	@ 0x40
 8003400:	d006      	beq.n	8003410 <UART_SetConfig+0x1b4>
 8003402:	e00b      	b.n	800341c <UART_SetConfig+0x1c0>
 8003404:	2300      	movs	r3, #0
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e0cc      	b.n	80035a4 <UART_SetConfig+0x348>
 800340a:	2302      	movs	r3, #2
 800340c:	77fb      	strb	r3, [r7, #31]
 800340e:	e0c9      	b.n	80035a4 <UART_SetConfig+0x348>
 8003410:	2304      	movs	r3, #4
 8003412:	77fb      	strb	r3, [r7, #31]
 8003414:	e0c6      	b.n	80035a4 <UART_SetConfig+0x348>
 8003416:	2308      	movs	r3, #8
 8003418:	77fb      	strb	r3, [r7, #31]
 800341a:	e0c3      	b.n	80035a4 <UART_SetConfig+0x348>
 800341c:	2310      	movs	r3, #16
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e0c0      	b.n	80035a4 <UART_SetConfig+0x348>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a44      	ldr	r2, [pc, #272]	@ (8003538 <UART_SetConfig+0x2dc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d125      	bne.n	8003478 <UART_SetConfig+0x21c>
 800342c:	4b3e      	ldr	r3, [pc, #248]	@ (8003528 <UART_SetConfig+0x2cc>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003436:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800343a:	d017      	beq.n	800346c <UART_SetConfig+0x210>
 800343c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003440:	d817      	bhi.n	8003472 <UART_SetConfig+0x216>
 8003442:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003446:	d00b      	beq.n	8003460 <UART_SetConfig+0x204>
 8003448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800344c:	d811      	bhi.n	8003472 <UART_SetConfig+0x216>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <UART_SetConfig+0x1fe>
 8003452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003456:	d006      	beq.n	8003466 <UART_SetConfig+0x20a>
 8003458:	e00b      	b.n	8003472 <UART_SetConfig+0x216>
 800345a:	2300      	movs	r3, #0
 800345c:	77fb      	strb	r3, [r7, #31]
 800345e:	e0a1      	b.n	80035a4 <UART_SetConfig+0x348>
 8003460:	2302      	movs	r3, #2
 8003462:	77fb      	strb	r3, [r7, #31]
 8003464:	e09e      	b.n	80035a4 <UART_SetConfig+0x348>
 8003466:	2304      	movs	r3, #4
 8003468:	77fb      	strb	r3, [r7, #31]
 800346a:	e09b      	b.n	80035a4 <UART_SetConfig+0x348>
 800346c:	2308      	movs	r3, #8
 800346e:	77fb      	strb	r3, [r7, #31]
 8003470:	e098      	b.n	80035a4 <UART_SetConfig+0x348>
 8003472:	2310      	movs	r3, #16
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	e095      	b.n	80035a4 <UART_SetConfig+0x348>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a2f      	ldr	r2, [pc, #188]	@ (800353c <UART_SetConfig+0x2e0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d125      	bne.n	80034ce <UART_SetConfig+0x272>
 8003482:	4b29      	ldr	r3, [pc, #164]	@ (8003528 <UART_SetConfig+0x2cc>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003488:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800348c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003490:	d017      	beq.n	80034c2 <UART_SetConfig+0x266>
 8003492:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003496:	d817      	bhi.n	80034c8 <UART_SetConfig+0x26c>
 8003498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800349c:	d00b      	beq.n	80034b6 <UART_SetConfig+0x25a>
 800349e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034a2:	d811      	bhi.n	80034c8 <UART_SetConfig+0x26c>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <UART_SetConfig+0x254>
 80034a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ac:	d006      	beq.n	80034bc <UART_SetConfig+0x260>
 80034ae:	e00b      	b.n	80034c8 <UART_SetConfig+0x26c>
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e076      	b.n	80035a4 <UART_SetConfig+0x348>
 80034b6:	2302      	movs	r3, #2
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e073      	b.n	80035a4 <UART_SetConfig+0x348>
 80034bc:	2304      	movs	r3, #4
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e070      	b.n	80035a4 <UART_SetConfig+0x348>
 80034c2:	2308      	movs	r3, #8
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e06d      	b.n	80035a4 <UART_SetConfig+0x348>
 80034c8:	2310      	movs	r3, #16
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e06a      	b.n	80035a4 <UART_SetConfig+0x348>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1b      	ldr	r2, [pc, #108]	@ (8003540 <UART_SetConfig+0x2e4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d138      	bne.n	800354a <UART_SetConfig+0x2ee>
 80034d8:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <UART_SetConfig+0x2cc>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034de:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80034e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034e6:	d017      	beq.n	8003518 <UART_SetConfig+0x2bc>
 80034e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034ec:	d82a      	bhi.n	8003544 <UART_SetConfig+0x2e8>
 80034ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f2:	d00b      	beq.n	800350c <UART_SetConfig+0x2b0>
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f8:	d824      	bhi.n	8003544 <UART_SetConfig+0x2e8>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <UART_SetConfig+0x2aa>
 80034fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003502:	d006      	beq.n	8003512 <UART_SetConfig+0x2b6>
 8003504:	e01e      	b.n	8003544 <UART_SetConfig+0x2e8>
 8003506:	2300      	movs	r3, #0
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e04b      	b.n	80035a4 <UART_SetConfig+0x348>
 800350c:	2302      	movs	r3, #2
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e048      	b.n	80035a4 <UART_SetConfig+0x348>
 8003512:	2304      	movs	r3, #4
 8003514:	77fb      	strb	r3, [r7, #31]
 8003516:	e045      	b.n	80035a4 <UART_SetConfig+0x348>
 8003518:	2308      	movs	r3, #8
 800351a:	77fb      	strb	r3, [r7, #31]
 800351c:	e042      	b.n	80035a4 <UART_SetConfig+0x348>
 800351e:	bf00      	nop
 8003520:	efff69f3 	.word	0xefff69f3
 8003524:	40011000 	.word	0x40011000
 8003528:	40023800 	.word	0x40023800
 800352c:	40004400 	.word	0x40004400
 8003530:	40004800 	.word	0x40004800
 8003534:	40004c00 	.word	0x40004c00
 8003538:	40005000 	.word	0x40005000
 800353c:	40011400 	.word	0x40011400
 8003540:	40007800 	.word	0x40007800
 8003544:	2310      	movs	r3, #16
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e02c      	b.n	80035a4 <UART_SetConfig+0x348>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a72      	ldr	r2, [pc, #456]	@ (8003718 <UART_SetConfig+0x4bc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d125      	bne.n	80035a0 <UART_SetConfig+0x344>
 8003554:	4b71      	ldr	r3, [pc, #452]	@ (800371c <UART_SetConfig+0x4c0>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800355e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003562:	d017      	beq.n	8003594 <UART_SetConfig+0x338>
 8003564:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003568:	d817      	bhi.n	800359a <UART_SetConfig+0x33e>
 800356a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800356e:	d00b      	beq.n	8003588 <UART_SetConfig+0x32c>
 8003570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003574:	d811      	bhi.n	800359a <UART_SetConfig+0x33e>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <UART_SetConfig+0x326>
 800357a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800357e:	d006      	beq.n	800358e <UART_SetConfig+0x332>
 8003580:	e00b      	b.n	800359a <UART_SetConfig+0x33e>
 8003582:	2300      	movs	r3, #0
 8003584:	77fb      	strb	r3, [r7, #31]
 8003586:	e00d      	b.n	80035a4 <UART_SetConfig+0x348>
 8003588:	2302      	movs	r3, #2
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	e00a      	b.n	80035a4 <UART_SetConfig+0x348>
 800358e:	2304      	movs	r3, #4
 8003590:	77fb      	strb	r3, [r7, #31]
 8003592:	e007      	b.n	80035a4 <UART_SetConfig+0x348>
 8003594:	2308      	movs	r3, #8
 8003596:	77fb      	strb	r3, [r7, #31]
 8003598:	e004      	b.n	80035a4 <UART_SetConfig+0x348>
 800359a:	2310      	movs	r3, #16
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	e001      	b.n	80035a4 <UART_SetConfig+0x348>
 80035a0:	2310      	movs	r3, #16
 80035a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ac:	d15b      	bne.n	8003666 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d828      	bhi.n	8003606 <UART_SetConfig+0x3aa>
 80035b4:	a201      	add	r2, pc, #4	@ (adr r2, 80035bc <UART_SetConfig+0x360>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035e1 	.word	0x080035e1
 80035c0:	080035e9 	.word	0x080035e9
 80035c4:	080035f1 	.word	0x080035f1
 80035c8:	08003607 	.word	0x08003607
 80035cc:	080035f7 	.word	0x080035f7
 80035d0:	08003607 	.word	0x08003607
 80035d4:	08003607 	.word	0x08003607
 80035d8:	08003607 	.word	0x08003607
 80035dc:	080035ff 	.word	0x080035ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e0:	f7fe fe38 	bl	8002254 <HAL_RCC_GetPCLK1Freq>
 80035e4:	61b8      	str	r0, [r7, #24]
        break;
 80035e6:	e013      	b.n	8003610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e8:	f7fe fe48 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 80035ec:	61b8      	str	r0, [r7, #24]
        break;
 80035ee:	e00f      	b.n	8003610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003720 <UART_SetConfig+0x4c4>)
 80035f2:	61bb      	str	r3, [r7, #24]
        break;
 80035f4:	e00c      	b.n	8003610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f6:	f7fe fd5b 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 80035fa:	61b8      	str	r0, [r7, #24]
        break;
 80035fc:	e008      	b.n	8003610 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003602:	61bb      	str	r3, [r7, #24]
        break;
 8003604:	e004      	b.n	8003610 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	77bb      	strb	r3, [r7, #30]
        break;
 800360e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d074      	beq.n	8003700 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	005a      	lsls	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	441a      	add	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b0f      	cmp	r3, #15
 8003630:	d916      	bls.n	8003660 <UART_SetConfig+0x404>
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003638:	d212      	bcs.n	8003660 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	b29b      	uxth	r3, r3
 800363e:	f023 030f 	bic.w	r3, r3, #15
 8003642:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	b29b      	uxth	r3, r3
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	b29a      	uxth	r2, r3
 8003650:	89fb      	ldrh	r3, [r7, #14]
 8003652:	4313      	orrs	r3, r2
 8003654:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	89fa      	ldrh	r2, [r7, #14]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	e04f      	b.n	8003700 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	77bb      	strb	r3, [r7, #30]
 8003664:	e04c      	b.n	8003700 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003666:	7ffb      	ldrb	r3, [r7, #31]
 8003668:	2b08      	cmp	r3, #8
 800366a:	d828      	bhi.n	80036be <UART_SetConfig+0x462>
 800366c:	a201      	add	r2, pc, #4	@ (adr r2, 8003674 <UART_SetConfig+0x418>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	08003699 	.word	0x08003699
 8003678:	080036a1 	.word	0x080036a1
 800367c:	080036a9 	.word	0x080036a9
 8003680:	080036bf 	.word	0x080036bf
 8003684:	080036af 	.word	0x080036af
 8003688:	080036bf 	.word	0x080036bf
 800368c:	080036bf 	.word	0x080036bf
 8003690:	080036bf 	.word	0x080036bf
 8003694:	080036b7 	.word	0x080036b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003698:	f7fe fddc 	bl	8002254 <HAL_RCC_GetPCLK1Freq>
 800369c:	61b8      	str	r0, [r7, #24]
        break;
 800369e:	e013      	b.n	80036c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a0:	f7fe fdec 	bl	800227c <HAL_RCC_GetPCLK2Freq>
 80036a4:	61b8      	str	r0, [r7, #24]
        break;
 80036a6:	e00f      	b.n	80036c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003720 <UART_SetConfig+0x4c4>)
 80036aa:	61bb      	str	r3, [r7, #24]
        break;
 80036ac:	e00c      	b.n	80036c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ae:	f7fe fcff 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 80036b2:	61b8      	str	r0, [r7, #24]
        break;
 80036b4:	e008      	b.n	80036c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ba:	61bb      	str	r3, [r7, #24]
        break;
 80036bc:	e004      	b.n	80036c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	77bb      	strb	r3, [r7, #30]
        break;
 80036c6:	bf00      	nop
    }

    if (pclk != 0U)
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d018      	beq.n	8003700 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	085a      	lsrs	r2, r3, #1
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	441a      	add	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b0f      	cmp	r3, #15
 80036e6:	d909      	bls.n	80036fc <UART_SetConfig+0x4a0>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ee:	d205      	bcs.n	80036fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	e001      	b.n	8003700 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800370c:	7fbb      	ldrb	r3, [r7, #30]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40007c00 	.word	0x40007c00
 800371c:	40023800 	.word	0x40023800
 8003720:	00f42400 	.word	0x00f42400

08003724 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01a      	beq.n	800383a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003822:	d10a      	bne.n	800383a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	605a      	str	r2, [r3, #4]
  }
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08c      	sub	sp, #48	@ 0x30
 800386c:	af02      	add	r7, sp, #8
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003878:	f7fd fb3c 	bl	8000ef4 <HAL_GetTick>
 800387c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b08      	cmp	r3, #8
 800388a:	d12e      	bne.n	80038ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800388c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	2200      	movs	r2, #0
 8003896:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f83b 	bl	8003916 <UART_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d021      	beq.n	80038ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038ba:	623b      	str	r3, [r7, #32]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	69b9      	ldr	r1, [r7, #24]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	617b      	str	r3, [r7, #20]
   return(result);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e6      	bne.n	80038a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e011      	b.n	800390e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3728      	adds	r7, #40	@ 0x28
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4613      	mov	r3, r2
 8003924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003926:	e04f      	b.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d04b      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003930:	f7fd fae0 	bl	8000ef4 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	429a      	cmp	r2, r3
 800393e:	d302      	bcc.n	8003946 <UART_WaitOnFlagUntilTimeout+0x30>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e04e      	b.n	80039e8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d037      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b80      	cmp	r3, #128	@ 0x80
 800395c:	d034      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b40      	cmp	r3, #64	@ 0x40
 8003962:	d031      	beq.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b08      	cmp	r3, #8
 8003970:	d110      	bne.n	8003994 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2208      	movs	r2, #8
 8003978:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f838 	bl	80039f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2208      	movs	r2, #8
 8003984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e029      	b.n	80039e8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800399e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a2:	d111      	bne.n	80039c8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f81e 	bl	80039f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e00f      	b.n	80039e8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d0a0      	beq.n	8003928 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b095      	sub	sp, #84	@ 0x54
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a16:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a1e:	e841 2300 	strex	r3, r2, [r1]
 8003a22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1e6      	bne.n	80039f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3308      	adds	r3, #8
 8003a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d118      	bne.n	8003a98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f023 0310 	bic.w	r3, r3, #16
 8003a7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6979      	ldr	r1, [r7, #20]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	613b      	str	r3, [r7, #16]
   return(result);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e6      	bne.n	8003a66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003aac:	bf00      	nop
 8003aae:	3754      	adds	r7, #84	@ 0x54
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f7ff fbaa 	bl	8003230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	61bb      	str	r3, [r7, #24]
 8003b0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0e:	6979      	ldr	r1, [r7, #20]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	613b      	str	r3, [r7, #16]
   return(result);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e6      	bne.n	8003aec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fb76 	bl	800321c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b30:	bf00      	nop
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <memset>:
 8003b38:	4402      	add	r2, r0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d100      	bne.n	8003b42 <memset+0xa>
 8003b40:	4770      	bx	lr
 8003b42:	f803 1b01 	strb.w	r1, [r3], #1
 8003b46:	e7f9      	b.n	8003b3c <memset+0x4>

08003b48 <strncmp>:
 8003b48:	b510      	push	{r4, lr}
 8003b4a:	b16a      	cbz	r2, 8003b68 <strncmp+0x20>
 8003b4c:	3901      	subs	r1, #1
 8003b4e:	1884      	adds	r4, r0, r2
 8003b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d103      	bne.n	8003b64 <strncmp+0x1c>
 8003b5c:	42a0      	cmp	r0, r4
 8003b5e:	d001      	beq.n	8003b64 <strncmp+0x1c>
 8003b60:	2a00      	cmp	r2, #0
 8003b62:	d1f5      	bne.n	8003b50 <strncmp+0x8>
 8003b64:	1ad0      	subs	r0, r2, r3
 8003b66:	bd10      	pop	{r4, pc}
 8003b68:	4610      	mov	r0, r2
 8003b6a:	e7fc      	b.n	8003b66 <strncmp+0x1e>

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ba4 <__libc_init_array+0x38>)
 8003b70:	4c0d      	ldr	r4, [pc, #52]	@ (8003ba8 <__libc_init_array+0x3c>)
 8003b72:	1b64      	subs	r4, r4, r5
 8003b74:	10a4      	asrs	r4, r4, #2
 8003b76:	2600      	movs	r6, #0
 8003b78:	42a6      	cmp	r6, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8003bac <__libc_init_array+0x40>)
 8003b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8003bb0 <__libc_init_array+0x44>)
 8003b80:	f000 f818 	bl	8003bb4 <_init>
 8003b84:	1b64      	subs	r4, r4, r5
 8003b86:	10a4      	asrs	r4, r4, #2
 8003b88:	2600      	movs	r6, #0
 8003b8a:	42a6      	cmp	r6, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b94:	4798      	blx	r3
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9e:	4798      	blx	r3
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08003c74 	.word	0x08003c74
 8003ba8:	08003c74 	.word	0x08003c74
 8003bac:	08003c74 	.word	0x08003c74
 8003bb0:	08003c78 	.word	0x08003c78

08003bb4 <_init>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	bf00      	nop
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr

08003bc0 <_fini>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	bf00      	nop
 8003bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc6:	bc08      	pop	{r3}
 8003bc8:	469e      	mov	lr, r3
 8003bca:	4770      	bx	lr
