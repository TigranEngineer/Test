
PCI100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d40  080001e0  080001e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08003f20  08003f20  00004f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004198  08004198  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004198  08004198  00005198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041a0  080041a0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041a0  080041a0  000051a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041a4  080041a4  000051a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080041a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000060  08004208  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  08004208  000066b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d148  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb3  00000000  00000000  000131d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00014e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000828  00000000  00000000  00015900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021731  00000000  00000000  00016128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e181  00000000  00000000  00037859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d201c  00000000  00000000  000459da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001179f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  00117a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003f08 	.word	0x08003f08

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08003f08 	.word	0x08003f08

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b988 	b.w	800056c <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000278:	9d08      	ldr	r5, [sp, #32]
 800027a:	468e      	mov	lr, r1
 800027c:	4604      	mov	r4, r0
 800027e:	4688      	mov	r8, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14a      	bne.n	800031a <__udivmoddi4+0xa6>
 8000284:	428a      	cmp	r2, r1
 8000286:	4617      	mov	r7, r2
 8000288:	d962      	bls.n	8000350 <__udivmoddi4+0xdc>
 800028a:	fab2 f682 	clz	r6, r2
 800028e:	b14e      	cbz	r6, 80002a4 <__udivmoddi4+0x30>
 8000290:	f1c6 0320 	rsb	r3, r6, #32
 8000294:	fa01 f806 	lsl.w	r8, r1, r6
 8000298:	fa20 f303 	lsr.w	r3, r0, r3
 800029c:	40b7      	lsls	r7, r6
 800029e:	ea43 0808 	orr.w	r8, r3, r8
 80002a2:	40b4      	lsls	r4, r6
 80002a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a8:	fa1f fc87 	uxth.w	ip, r7
 80002ac:	fbb8 f1fe 	udiv	r1, r8, lr
 80002b0:	0c23      	lsrs	r3, r4, #16
 80002b2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ba:	fb01 f20c 	mul.w	r2, r1, ip
 80002be:	429a      	cmp	r2, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x62>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c8:	f080 80ea 	bcs.w	80004a0 <__udivmoddi4+0x22c>
 80002cc:	429a      	cmp	r2, r3
 80002ce:	f240 80e7 	bls.w	80004a0 <__udivmoddi4+0x22c>
 80002d2:	3902      	subs	r1, #2
 80002d4:	443b      	add	r3, r7
 80002d6:	1a9a      	subs	r2, r3, r2
 80002d8:	b2a3      	uxth	r3, r4
 80002da:	fbb2 f0fe 	udiv	r0, r2, lr
 80002de:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ea:	459c      	cmp	ip, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x8e>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f4:	f080 80d6 	bcs.w	80004a4 <__udivmoddi4+0x230>
 80002f8:	459c      	cmp	ip, r3
 80002fa:	f240 80d3 	bls.w	80004a4 <__udivmoddi4+0x230>
 80002fe:	443b      	add	r3, r7
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000306:	eba3 030c 	sub.w	r3, r3, ip
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa2>
 800030e:	40f3      	lsrs	r3, r6
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xb6>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb0>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa2>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x14c>
 8000332:	4573      	cmp	r3, lr
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xc8>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 8105 	bhi.w	8000546 <__udivmoddi4+0x2d2>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000342:	2001      	movs	r0, #1
 8000344:	4690      	mov	r8, r2
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e5      	beq.n	8000316 <__udivmoddi4+0xa2>
 800034a:	e9c5 4800 	strd	r4, r8, [r5]
 800034e:	e7e2      	b.n	8000316 <__udivmoddi4+0xa2>
 8000350:	2a00      	cmp	r2, #0
 8000352:	f000 8090 	beq.w	8000476 <__udivmoddi4+0x202>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	2e00      	cmp	r6, #0
 800035c:	f040 80a4 	bne.w	80004a8 <__udivmoddi4+0x234>
 8000360:	1a8a      	subs	r2, r1, r2
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	b280      	uxth	r0, r0
 800036a:	b2bc      	uxth	r4, r7
 800036c:	2101      	movs	r1, #1
 800036e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000372:	fb0e 221c 	mls	r2, lr, ip, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb04 f20c 	mul.w	r2, r4, ip
 800037e:	429a      	cmp	r2, r3
 8000380:	d907      	bls.n	8000392 <__udivmoddi4+0x11e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x11c>
 800038a:	429a      	cmp	r2, r3
 800038c:	f200 80e0 	bhi.w	8000550 <__udivmoddi4+0x2dc>
 8000390:	46c4      	mov	ip, r8
 8000392:	1a9b      	subs	r3, r3, r2
 8000394:	fbb3 f2fe 	udiv	r2, r3, lr
 8000398:	fb0e 3312 	mls	r3, lr, r2, r3
 800039c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003a0:	fb02 f404 	mul.w	r4, r2, r4
 80003a4:	429c      	cmp	r4, r3
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x144>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x142>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f200 80ca 	bhi.w	800054a <__udivmoddi4+0x2d6>
 80003b6:	4602      	mov	r2, r0
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa0e f401 	lsl.w	r4, lr, r1
 80003d0:	fa20 f306 	lsr.w	r3, r0, r6
 80003d4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fa00 f801 	lsl.w	r8, r0, r1
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	fb09 ee10 	mls	lr, r9, r0, lr
 80003f0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x1a0>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f100 3aff 	add.w	sl, r0, #4294967295
 8000406:	f080 809c 	bcs.w	8000542 <__udivmoddi4+0x2ce>
 800040a:	45a6      	cmp	lr, r4
 800040c:	f240 8099 	bls.w	8000542 <__udivmoddi4+0x2ce>
 8000410:	3802      	subs	r0, #2
 8000412:	443c      	add	r4, r7
 8000414:	eba4 040e 	sub.w	r4, r4, lr
 8000418:	fa1f fe83 	uxth.w	lr, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000428:	fb03 fc0c 	mul.w	ip, r3, ip
 800042c:	45a4      	cmp	ip, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1ce>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f103 3eff 	add.w	lr, r3, #4294967295
 8000436:	f080 8082 	bcs.w	800053e <__udivmoddi4+0x2ca>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d97f      	bls.n	800053e <__udivmoddi4+0x2ca>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000446:	eba4 040c 	sub.w	r4, r4, ip
 800044a:	fba0 ec02 	umull	lr, ip, r0, r2
 800044e:	4564      	cmp	r4, ip
 8000450:	4673      	mov	r3, lr
 8000452:	46e1      	mov	r9, ip
 8000454:	d362      	bcc.n	800051c <__udivmoddi4+0x2a8>
 8000456:	d05f      	beq.n	8000518 <__udivmoddi4+0x2a4>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x1fe>
 800045a:	ebb8 0203 	subs.w	r2, r8, r3
 800045e:	eb64 0409 	sbc.w	r4, r4, r9
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	431e      	orrs	r6, r3
 800046c:	40cc      	lsrs	r4, r1
 800046e:	e9c5 6400 	strd	r6, r4, [r5]
 8000472:	2100      	movs	r1, #0
 8000474:	e74f      	b.n	8000316 <__udivmoddi4+0xa2>
 8000476:	fbb1 fcf2 	udiv	ip, r1, r2
 800047a:	0c01      	lsrs	r1, r0, #16
 800047c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000480:	b280      	uxth	r0, r0
 8000482:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000486:	463b      	mov	r3, r7
 8000488:	4638      	mov	r0, r7
 800048a:	463c      	mov	r4, r7
 800048c:	46b8      	mov	r8, r7
 800048e:	46be      	mov	lr, r7
 8000490:	2620      	movs	r6, #32
 8000492:	fbb1 f1f7 	udiv	r1, r1, r7
 8000496:	eba2 0208 	sub.w	r2, r2, r8
 800049a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049e:	e766      	b.n	800036e <__udivmoddi4+0xfa>
 80004a0:	4601      	mov	r1, r0
 80004a2:	e718      	b.n	80002d6 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e72c      	b.n	8000302 <__udivmoddi4+0x8e>
 80004a8:	f1c6 0220 	rsb	r2, r6, #32
 80004ac:	fa2e f302 	lsr.w	r3, lr, r2
 80004b0:	40b7      	lsls	r7, r6
 80004b2:	40b1      	lsls	r1, r6
 80004b4:	fa20 f202 	lsr.w	r2, r0, r2
 80004b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004bc:	430a      	orrs	r2, r1
 80004be:	fbb3 f8fe 	udiv	r8, r3, lr
 80004c2:	b2bc      	uxth	r4, r7
 80004c4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb08 f904 	mul.w	r9, r8, r4
 80004d2:	40b0      	lsls	r0, r6
 80004d4:	4589      	cmp	r9, r1
 80004d6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004da:	b280      	uxth	r0, r0
 80004dc:	d93e      	bls.n	800055c <__udivmoddi4+0x2e8>
 80004de:	1879      	adds	r1, r7, r1
 80004e0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e4:	d201      	bcs.n	80004ea <__udivmoddi4+0x276>
 80004e6:	4589      	cmp	r9, r1
 80004e8:	d81f      	bhi.n	800052a <__udivmoddi4+0x2b6>
 80004ea:	eba1 0109 	sub.w	r1, r1, r9
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	b292      	uxth	r2, r2
 80004fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000500:	4542      	cmp	r2, r8
 8000502:	d229      	bcs.n	8000558 <__udivmoddi4+0x2e4>
 8000504:	18ba      	adds	r2, r7, r2
 8000506:	f109 31ff 	add.w	r1, r9, #4294967295
 800050a:	d2c4      	bcs.n	8000496 <__udivmoddi4+0x222>
 800050c:	4542      	cmp	r2, r8
 800050e:	d2c2      	bcs.n	8000496 <__udivmoddi4+0x222>
 8000510:	f1a9 0102 	sub.w	r1, r9, #2
 8000514:	443a      	add	r2, r7
 8000516:	e7be      	b.n	8000496 <__udivmoddi4+0x222>
 8000518:	45f0      	cmp	r8, lr
 800051a:	d29d      	bcs.n	8000458 <__udivmoddi4+0x1e4>
 800051c:	ebbe 0302 	subs.w	r3, lr, r2
 8000520:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000524:	3801      	subs	r0, #1
 8000526:	46e1      	mov	r9, ip
 8000528:	e796      	b.n	8000458 <__udivmoddi4+0x1e4>
 800052a:	eba7 0909 	sub.w	r9, r7, r9
 800052e:	4449      	add	r1, r9
 8000530:	f1a8 0c02 	sub.w	ip, r8, #2
 8000534:	fbb1 f9fe 	udiv	r9, r1, lr
 8000538:	fb09 f804 	mul.w	r8, r9, r4
 800053c:	e7db      	b.n	80004f6 <__udivmoddi4+0x282>
 800053e:	4673      	mov	r3, lr
 8000540:	e77f      	b.n	8000442 <__udivmoddi4+0x1ce>
 8000542:	4650      	mov	r0, sl
 8000544:	e766      	b.n	8000414 <__udivmoddi4+0x1a0>
 8000546:	4608      	mov	r0, r1
 8000548:	e6fd      	b.n	8000346 <__udivmoddi4+0xd2>
 800054a:	443b      	add	r3, r7
 800054c:	3a02      	subs	r2, #2
 800054e:	e733      	b.n	80003b8 <__udivmoddi4+0x144>
 8000550:	f1ac 0c02 	sub.w	ip, ip, #2
 8000554:	443b      	add	r3, r7
 8000556:	e71c      	b.n	8000392 <__udivmoddi4+0x11e>
 8000558:	4649      	mov	r1, r9
 800055a:	e79c      	b.n	8000496 <__udivmoddi4+0x222>
 800055c:	eba1 0109 	sub.w	r1, r1, r9
 8000560:	46c4      	mov	ip, r8
 8000562:	fbb1 f9fe 	udiv	r9, r1, lr
 8000566:	fb09 f804 	mul.w	r8, r9, r4
 800056a:	e7c4      	b.n	80004f6 <__udivmoddi4+0x282>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <Get_Sum_Bitwise>:
  BLINK_100,
  BLINK_1000
};

static uint8_t Get_Sum_Bitwise(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  uint8_t sum= 0;
 8000576:	2300      	movs	r3, #0
 8000578:	71fb      	strb	r3, [r7, #7]

	sum |= HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800057a:	2101      	movs	r1, #1
 800057c:	4830      	ldr	r0, [pc, #192]	@ (8000640 <Get_Sum_Bitwise+0xd0>)
 800057e:	f001 f993 	bl	80018a8 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4313      	orrs	r3, r2
 800058a:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) << 1);
 800058c:	2102      	movs	r1, #2
 800058e:	482c      	ldr	r0, [pc, #176]	@ (8000640 <Get_Sum_Bitwise+0xd0>)
 8000590:	f001 f98a 	bl	80018a8 <HAL_GPIO_ReadPin>
 8000594:	4603      	mov	r3, r0
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	b25a      	sxtb	r2, r3
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	4313      	orrs	r3, r2
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) << 2);
 80005a4:	2104      	movs	r1, #4
 80005a6:	4826      	ldr	r0, [pc, #152]	@ (8000640 <Get_Sum_Bitwise+0xd0>)
 80005a8:	f001 f97e 	bl	80018a8 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	b25a      	sxtb	r2, r3
 80005b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) << 3);
 80005bc:	2108      	movs	r1, #8
 80005be:	4820      	ldr	r0, [pc, #128]	@ (8000640 <Get_Sum_Bitwise+0xd0>)
 80005c0:	f001 f972 	bl	80018a8 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	00db      	lsls	r3, r3, #3
 80005c8:	b25a      	sxtb	r2, r3
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) << 4);
 80005d4:	2110      	movs	r1, #16
 80005d6:	481a      	ldr	r0, [pc, #104]	@ (8000640 <Get_Sum_Bitwise+0xd0>)
 80005d8:	f001 f966 	bl	80018a8 <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	b25a      	sxtb	r2, r3
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) << 5);
 80005ec:	2120      	movs	r1, #32
 80005ee:	4814      	ldr	r0, [pc, #80]	@ (8000640 <Get_Sum_Bitwise+0xd0>)
 80005f0:	f001 f95a 	bl	80018a8 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	015b      	lsls	r3, r3, #5
 80005f8:	b25a      	sxtb	r2, r3
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	4313      	orrs	r3, r2
 8000600:	b25b      	sxtb	r3, r3
 8000602:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) << 6);
 8000604:	2140      	movs	r1, #64	@ 0x40
 8000606:	480e      	ldr	r0, [pc, #56]	@ (8000640 <Get_Sum_Bitwise+0xd0>)
 8000608:	f001 f94e 	bl	80018a8 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	019b      	lsls	r3, r3, #6
 8000610:	b25a      	sxtb	r2, r3
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	4313      	orrs	r3, r2
 8000618:	b25b      	sxtb	r3, r3
 800061a:	71fb      	strb	r3, [r7, #7]
	sum |= (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) << 7);
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	4808      	ldr	r0, [pc, #32]	@ (8000640 <Get_Sum_Bitwise+0xd0>)
 8000620:	f001 f942 	bl	80018a8 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	01db      	lsls	r3, r3, #7
 8000628:	b25a      	sxtb	r2, r3
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	4313      	orrs	r3, r2
 8000630:	b25b      	sxtb	r3, r3
 8000632:	71fb      	strb	r3, [r7, #7]
  
	return (sum);
 8000634:	79fb      	ldrb	r3, [r7, #7]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020000 	.word	0x40020000

08000644 <Blink_Led>:

static void Blink_Led(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  if (g_mod == OFF || g_default == 0){
 8000648:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <Blink_Led+0x70>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d003      	beq.n	8000658 <Blink_Led+0x14>
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <Blink_Led+0x74>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d106      	bne.n	8000666 <Blink_Led+0x22>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800065e:	4817      	ldr	r0, [pc, #92]	@ (80006bc <Blink_Led+0x78>)
 8000660:	f001 f93a 	bl	80018d8 <HAL_GPIO_WritePin>
 8000664:	e023      	b.n	80006ae <Blink_Led+0x6a>
  } else if (g_freq == 0 && g_default == 1) {
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <Blink_Led+0x7c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d10a      	bne.n	8000684 <Blink_Led+0x40>
 800066e:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <Blink_Led+0x74>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d106      	bne.n	8000684 <Blink_Led+0x40>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800067c:	480f      	ldr	r0, [pc, #60]	@ (80006bc <Blink_Led+0x78>)
 800067e:	f001 f92b 	bl	80018d8 <HAL_GPIO_WritePin>
 8000682:	e014      	b.n	80006ae <Blink_Led+0x6a>
  } else {
    if (HAL_GetTick() - g_timer >= g_freq){
 8000684:	f000 fd4c 	bl	8001120 <HAL_GetTick>
 8000688:	4602      	mov	r2, r0
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <Blink_Led+0x80>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	1ad2      	subs	r2, r2, r3
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <Blink_Led+0x7c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d30a      	bcc.n	80006ae <Blink_Led+0x6a>
      g_timer = HAL_GetTick();
 8000698:	f000 fd42 	bl	8001120 <HAL_GetTick>
 800069c:	4603      	mov	r3, r0
 800069e:	4a09      	ldr	r2, [pc, #36]	@ (80006c4 <Blink_Led+0x80>)
 80006a0:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
 80006a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <Blink_Led+0x78>)
 80006a8:	f001 f92f 	bl	800190a <HAL_GPIO_TogglePin>
    }
  }
}
 80006ac:	e7ff      	b.n	80006ae <Blink_Led+0x6a>
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000160 	.word	0x20000160
 80006bc:	40020400 	.word	0x40020400
 80006c0:	20000158 	.word	0x20000158
 80006c4:	2000015c 	.word	0x2000015c

080006c8 <Default_Mod>:

static uint32_t Default_Mod(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  g_default = Get_Sum_Bitwise();
 80006cc:	f7ff ff50 	bl	8000570 <Get_Sum_Bitwise>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <Default_Mod+0x4c>)
 80006d6:	701a      	strb	r2, [r3, #0]
  
	if (g_default > GPIO_PIN_COUNT || g_default < 2) {
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <Default_Mod+0x4c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b08      	cmp	r3, #8
 80006de:	d803      	bhi.n	80006e8 <Default_Mod+0x20>
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <Default_Mod+0x4c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d80c      	bhi.n	8000702 <Default_Mod+0x3a>
    g_default = (g_default == 1) ? 1 : 0;
 80006e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000714 <Default_Mod+0x4c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	bf0c      	ite	eq
 80006f0:	2301      	moveq	r3, #1
 80006f2:	2300      	movne	r3, #0
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <Default_Mod+0x4c>)
 80006fa:	701a      	strb	r2, [r3, #0]
    return g_freq;
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <Default_Mod+0x50>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	e005      	b.n	800070e <Default_Mod+0x46>
  } 
  
  return freq_arr[g_default];
 8000702:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <Default_Mod+0x4c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <Default_Mod+0x54>)
 800070a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000160 	.word	0x20000160
 8000718:	20000158 	.word	0x20000158
 800071c:	08004058 	.word	0x08004058

08000720 <Nbrs_Counter>:

static uint8_t Nbrs_Counter(uint32_t nbr)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint8_t count = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]
  
  while (nbr){
 800072c:	e008      	b.n	8000740 <Nbrs_Counter+0x20>
    ++count;
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3301      	adds	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
    nbr /= 10;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <Nbrs_Counter+0x34>)
 8000738:	fba2 2303 	umull	r2, r3, r2, r3
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	607b      	str	r3, [r7, #4]
  while (nbr){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1f3      	bne.n	800072e <Nbrs_Counter+0xe>
  }
  return count;
 8000746:	7bfb      	ldrb	r3, [r7, #15]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	cccccccd 	.word	0xcccccccd

08000758 <To_Arr>:

static char *To_Arr(uint32_t freq)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  static char arr[11] = {0};
  uint8_t i;
  memset(arr, 0, 11);
 8000760:	220b      	movs	r2, #11
 8000762:	2100      	movs	r1, #0
 8000764:	4821      	ldr	r0, [pc, #132]	@ (80007ec <To_Arr+0x94>)
 8000766:	f003 fb7b 	bl	8003e60 <memset>
  
  if (freq == 0) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d103      	bne.n	8000778 <To_Arr+0x20>
    arr[0] = '0';
 8000770:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <To_Arr+0x94>)
 8000772:	2230      	movs	r2, #48	@ 0x30
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e034      	b.n	80007e2 <To_Arr+0x8a>
  } else {
    uint32_t exp = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
    for (i = Nbrs_Counter(freq) - 1; i > 0; --i){
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff ffcf 	bl	8000720 <Nbrs_Counter>
 8000782:	4603      	mov	r3, r0
 8000784:	3b01      	subs	r3, #1
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e008      	b.n	800079c <To_Arr+0x44>
      exp *= 10;
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	4613      	mov	r3, r2
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4413      	add	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	60bb      	str	r3, [r7, #8]
    for (i = Nbrs_Counter(freq) - 1; i > 0; --i){
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	3b01      	subs	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f3      	bne.n	800078a <To_Arr+0x32>
    }
    while (exp != 0) {
 80007a2:	e01b      	b.n	80007dc <To_Arr+0x84>
        arr[i] = (freq / exp) + '0';
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	3230      	adds	r2, #48	@ 0x30
 80007b2:	b2d1      	uxtb	r1, r2
 80007b4:	4a0d      	ldr	r2, [pc, #52]	@ (80007ec <To_Arr+0x94>)
 80007b6:	54d1      	strb	r1, [r2, r3]
        freq %= exp;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	fb01 f202 	mul.w	r2, r1, r2
 80007c6:	1a9b      	subs	r3, r3, r2
 80007c8:	607b      	str	r3, [r7, #4]
        exp /= 10;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <To_Arr+0x98>)
 80007ce:	fba2 2303 	umull	r2, r3, r2, r3
 80007d2:	08db      	lsrs	r3, r3, #3
 80007d4:	60bb      	str	r3, [r7, #8]
        ++i; 
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	3301      	adds	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
    while (exp != 0) {
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d1e0      	bne.n	80007a4 <To_Arr+0x4c>
    }
  }
  return arr;
 80007e2:	4b02      	ldr	r3, [pc, #8]	@ (80007ec <To_Arr+0x94>)
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000164 	.word	0x20000164
 80007f0:	cccccccd 	.word	0xcccccccd

080007f4 <Transmit_data>:

static void Transmit_data(char *data)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)data, strlen(data), 1);
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fd19 	bl	8000234 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	b29a      	uxth	r2, r3
 8000806:	2301      	movs	r3, #1
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	4803      	ldr	r0, [pc, #12]	@ (8000818 <Transmit_data+0x24>)
 800080c:	f002 f9ee 	bl	8002bec <HAL_UART_Transmit>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000d0 	.word	0x200000d0

0800081c <Transmit_answer>:

static void Transmit_answer(char *buff)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b091      	sub	sp, #68	@ 0x44
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint16_t size = strlen(buff) - 2;
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff fd05 	bl	8000234 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29b      	uxth	r3, r3
 800082e:	3b02      	subs	r3, #2
 8000830:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  
  if (size <= 0){
 8000832:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 80a3 	beq.w	8000980 <Transmit_answer+0x164>
    return;
  }
  
  if (!strcmp(buff, "help\r\n")) {
 800083a:	4953      	ldr	r1, [pc, #332]	@ (8000988 <Transmit_answer+0x16c>)
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff fcef 	bl	8000220 <strcmp>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d106      	bne.n	8000856 <Transmit_answer+0x3a>
    Transmit_data("led <on/off>\r\n");
 8000848:	4850      	ldr	r0, [pc, #320]	@ (800098c <Transmit_answer+0x170>)
 800084a:	f7ff ffd3 	bl	80007f4 <Transmit_data>
    Transmit_data("led mode <get/set/reset>\r\n");
 800084e:	4850      	ldr	r0, [pc, #320]	@ (8000990 <Transmit_answer+0x174>)
 8000850:	f7ff ffd0 	bl	80007f4 <Transmit_data>
 8000854:	e095      	b.n	8000982 <Transmit_answer+0x166>
  } else if (!strcmp(buff, "led on\r\n")) {
 8000856:	494f      	ldr	r1, [pc, #316]	@ (8000994 <Transmit_answer+0x178>)
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff fce1 	bl	8000220 <strcmp>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10c      	bne.n	800087e <Transmit_answer+0x62>
    g_default = Get_Sum_Bitwise();
 8000864:	f7ff fe84 	bl	8000570 <Get_Sum_Bitwise>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	4b4a      	ldr	r3, [pc, #296]	@ (8000998 <Transmit_answer+0x17c>)
 800086e:	701a      	strb	r2, [r3, #0]
    g_mod = ON;
 8000870:	4b4a      	ldr	r3, [pc, #296]	@ (800099c <Transmit_answer+0x180>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
    Transmit_data("led turned on\r\n");
 8000876:	484a      	ldr	r0, [pc, #296]	@ (80009a0 <Transmit_answer+0x184>)
 8000878:	f7ff ffbc 	bl	80007f4 <Transmit_data>
 800087c:	e081      	b.n	8000982 <Transmit_answer+0x166>
  } else if (!strcmp(buff, "led off\r\n")) {
 800087e:	4949      	ldr	r1, [pc, #292]	@ (80009a4 <Transmit_answer+0x188>)
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff fccd 	bl	8000220 <strcmp>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d109      	bne.n	80008a0 <Transmit_answer+0x84>
    g_default = 0;
 800088c:	4b42      	ldr	r3, [pc, #264]	@ (8000998 <Transmit_answer+0x17c>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
    g_mod = OFF;
 8000892:	4b42      	ldr	r3, [pc, #264]	@ (800099c <Transmit_answer+0x180>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
    Transmit_data("led turned off\r\n");
 8000898:	4843      	ldr	r0, [pc, #268]	@ (80009a8 <Transmit_answer+0x18c>)
 800089a:	f7ff ffab 	bl	80007f4 <Transmit_data>
 800089e:	e070      	b.n	8000982 <Transmit_answer+0x166>
  } else if (!strcmp(buff, "led mode get\r\n")) {
 80008a0:	4942      	ldr	r1, [pc, #264]	@ (80009ac <Transmit_answer+0x190>)
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff fcbc 	bl	8000220 <strcmp>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d12f      	bne.n	800090e <Transmit_answer+0xf2>
    char arr[42] = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	222a      	movs	r2, #42	@ 0x2a
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 fad2 	bl	8003e60 <memset>
    strcpy(arr, "led mode is ");
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4a3b      	ldr	r2, [pc, #236]	@ (80009b0 <Transmit_answer+0x194>)
 80008c2:	461c      	mov	r4, r3
 80008c4:	4613      	mov	r3, r2
 80008c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c8:	c407      	stmia	r4!, {r0, r1, r2}
 80008ca:	7023      	strb	r3, [r4, #0]
    strcat(arr, To_Arr(g_freq));
 80008cc:	4b39      	ldr	r3, [pc, #228]	@ (80009b4 <Transmit_answer+0x198>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff41 	bl	8000758 <To_Arr>
 80008d6:	4602      	mov	r2, r0
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fac6 	bl	8003e70 <strcat>
    strcat(arr, "\r\n");
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fca3 	bl	8000234 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4413      	add	r3, r2
 80008f8:	4a2f      	ldr	r2, [pc, #188]	@ (80009b8 <Transmit_answer+0x19c>)
 80008fa:	8811      	ldrh	r1, [r2, #0]
 80008fc:	7892      	ldrb	r2, [r2, #2]
 80008fe:	8019      	strh	r1, [r3, #0]
 8000900:	709a      	strb	r2, [r3, #2]
    Transmit_data(arr);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff74 	bl	80007f4 <Transmit_data>
 800090c:	e039      	b.n	8000982 <Transmit_answer+0x166>
  } else if (!strncmp(buff, "led mode set ", strlen("led mode set "))) {
 800090e:	220d      	movs	r2, #13
 8000910:	492a      	ldr	r1, [pc, #168]	@ (80009bc <Transmit_answer+0x1a0>)
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f003 fabb 	bl	8003e8e <strncmp>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d11c      	bne.n	8000958 <Transmit_answer+0x13c>
    uint32_t tmp = atoi(buff + strlen("led mode set "));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	330d      	adds	r3, #13
 8000922:	4618      	mov	r0, r3
 8000924:	f003 fa14 	bl	8003d50 <atoi>
 8000928:	4603      	mov	r3, r0
 800092a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (tmp < 1 || tmp > 5000) {
 800092c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800092e:	2b00      	cmp	r3, #0
 8000930:	d004      	beq.n	800093c <Transmit_answer+0x120>
 8000932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000938:	4293      	cmp	r3, r2
 800093a:	d903      	bls.n	8000944 <Transmit_answer+0x128>
      Transmit_data("Range of allowed mode is [1, 5000]\r\n");
 800093c:	4820      	ldr	r0, [pc, #128]	@ (80009c0 <Transmit_answer+0x1a4>)
 800093e:	f7ff ff59 	bl	80007f4 <Transmit_data>
 8000942:	e01e      	b.n	8000982 <Transmit_answer+0x166>
    } else {
      g_freq = tmp;
 8000944:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <Transmit_answer+0x198>)
 8000946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000948:	6013      	str	r3, [r2, #0]
      g_default = 1;
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <Transmit_answer+0x17c>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
      Transmit_data("led mode successfully setted\r\n");
 8000950:	481c      	ldr	r0, [pc, #112]	@ (80009c4 <Transmit_answer+0x1a8>)
 8000952:	f7ff ff4f 	bl	80007f4 <Transmit_data>
 8000956:	e014      	b.n	8000982 <Transmit_answer+0x166>
    }
  } else if (!strcmp(buff, "led mode reset\r\n")){
 8000958:	491b      	ldr	r1, [pc, #108]	@ (80009c8 <Transmit_answer+0x1ac>)
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fc60 	bl	8000220 <strcmp>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d108      	bne.n	8000978 <Transmit_answer+0x15c>
    g_freq = Default_Mod();
 8000966:	f7ff feaf 	bl	80006c8 <Default_Mod>
 800096a:	4603      	mov	r3, r0
 800096c:	4a11      	ldr	r2, [pc, #68]	@ (80009b4 <Transmit_answer+0x198>)
 800096e:	6013      	str	r3, [r2, #0]
    Transmit_data("led mode successfully resetted\r\n");
 8000970:	4816      	ldr	r0, [pc, #88]	@ (80009cc <Transmit_answer+0x1b0>)
 8000972:	f7ff ff3f 	bl	80007f4 <Transmit_data>
 8000976:	e004      	b.n	8000982 <Transmit_answer+0x166>
  }
  else {
    Transmit_data("command not found\r\n");
 8000978:	4815      	ldr	r0, [pc, #84]	@ (80009d0 <Transmit_answer+0x1b4>)
 800097a:	f7ff ff3b 	bl	80007f4 <Transmit_data>
 800097e:	e000      	b.n	8000982 <Transmit_answer+0x166>
    return;
 8000980:	bf00      	nop
  }
}
 8000982:	3744      	adds	r7, #68	@ 0x44
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	08003f20 	.word	0x08003f20
 800098c:	08003f28 	.word	0x08003f28
 8000990:	08003f38 	.word	0x08003f38
 8000994:	08003f54 	.word	0x08003f54
 8000998:	20000160 	.word	0x20000160
 800099c:	20000000 	.word	0x20000000
 80009a0:	08003f60 	.word	0x08003f60
 80009a4:	08003f70 	.word	0x08003f70
 80009a8:	08003f7c 	.word	0x08003f7c
 80009ac:	08003f90 	.word	0x08003f90
 80009b0:	08003fa0 	.word	0x08003fa0
 80009b4:	20000158 	.word	0x20000158
 80009b8:	08003fb0 	.word	0x08003fb0
 80009bc:	08003fb4 	.word	0x08003fb4
 80009c0:	08003fc4 	.word	0x08003fc4
 80009c4:	08003fec 	.word	0x08003fec
 80009c8:	0800400c 	.word	0x0800400c
 80009cc:	08004020 	.word	0x08004020
 80009d0:	08004044 	.word	0x08004044

080009d4 <Echo_UART>:

static void Echo_UART(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  static uint8_t buff[1024] = {0};
  static uint16_t iter = 0;
  
  if (HAL_UART_Receive(&huart1, &buff[iter], 1, 1) == HAL_OK) {
 80009d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <Echo_UART+0x84>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <Echo_UART+0x88>)
 80009e0:	18d1      	adds	r1, r2, r3
 80009e2:	2301      	movs	r3, #1
 80009e4:	2201      	movs	r2, #1
 80009e6:	481e      	ldr	r0, [pc, #120]	@ (8000a60 <Echo_UART+0x8c>)
 80009e8:	f002 f989 	bl	8002cfe <HAL_UART_Receive>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d130      	bne.n	8000a54 <Echo_UART+0x80>
    HAL_UART_Transmit(&huart1, &buff[iter], 1, 1);
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <Echo_UART+0x84>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b18      	ldr	r3, [pc, #96]	@ (8000a5c <Echo_UART+0x88>)
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	2301      	movs	r3, #1
 80009fe:	2201      	movs	r2, #1
 8000a00:	4817      	ldr	r0, [pc, #92]	@ (8000a60 <Echo_UART+0x8c>)
 8000a02:	f002 f8f3 	bl	8002bec <HAL_UART_Transmit>
    if (buff[iter++] == '\r'){
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <Echo_UART+0x84>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	b291      	uxth	r1, r2
 8000a0e:	4a12      	ldr	r2, [pc, #72]	@ (8000a58 <Echo_UART+0x84>)
 8000a10:	8011      	strh	r1, [r2, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <Echo_UART+0x88>)
 8000a16:	5c9b      	ldrb	r3, [r3, r2]
 8000a18:	2b0d      	cmp	r3, #13
 8000a1a:	d11b      	bne.n	8000a54 <Echo_UART+0x80>
      buff[iter] = '\n';
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <Echo_UART+0x84>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <Echo_UART+0x88>)
 8000a24:	210a      	movs	r1, #10
 8000a26:	5499      	strb	r1, [r3, r2]
      HAL_UART_Transmit(&huart1, &buff[iter], 1, 1);
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <Echo_UART+0x84>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <Echo_UART+0x88>)
 8000a30:	18d1      	adds	r1, r2, r3
 8000a32:	2301      	movs	r3, #1
 8000a34:	2201      	movs	r2, #1
 8000a36:	480a      	ldr	r0, [pc, #40]	@ (8000a60 <Echo_UART+0x8c>)
 8000a38:	f002 f8d8 	bl	8002bec <HAL_UART_Transmit>
      Transmit_answer((char *)buff);
 8000a3c:	4807      	ldr	r0, [pc, #28]	@ (8000a5c <Echo_UART+0x88>)
 8000a3e:	f7ff feed 	bl	800081c <Transmit_answer>
      memset(buff, 0, 1024);
 8000a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a46:	2100      	movs	r1, #0
 8000a48:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <Echo_UART+0x88>)
 8000a4a:	f003 fa09 	bl	8003e60 <memset>
      iter = 0;
 8000a4e:	4b02      	ldr	r3, [pc, #8]	@ (8000a58 <Echo_UART+0x84>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000170 	.word	0x20000170
 8000a5c:	20000174 	.word	0x20000174
 8000a60:	200000d0 	.word	0x200000d0

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a68:	f000 f97a 	bl	8000d60 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 fb07 	bl	800107e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f814 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f000 f8de 	bl	8000c34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a78:	f000 f86c 	bl	8000b54 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a7c:	f000 f8aa 	bl	8000bd4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  g_freq = Default_Mod();
 8000a80:	f7ff fe22 	bl	80006c8 <Default_Mod>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <main+0x34>)
 8000a88:	6013      	str	r3, [r2, #0]
  while (1)
  {
    Echo_UART();
 8000a8a:	f7ff ffa3 	bl	80009d4 <Echo_UART>
    Blink_Led();
 8000a8e:	f7ff fdd9 	bl	8000644 <Blink_Led>
    Echo_UART();
 8000a92:	bf00      	nop
 8000a94:	e7f9      	b.n	8000a8a <main+0x26>
 8000a96:	bf00      	nop
 8000a98:	20000158 	.word	0x20000158

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	@ 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2230      	movs	r2, #48	@ 0x30
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 f9d8 	bl	8003e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <SystemClock_Config+0xb0>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <SystemClock_Config+0xb0>)
 8000ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <SystemClock_Config+0xb0>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b50 <SystemClock_Config+0xb4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b50 <SystemClock_Config+0xb4>)
 8000ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <SystemClock_Config+0xb4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0320 	add.w	r3, r7, #32
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 f84d 	bl	8001ba8 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000b14:	f000 f950 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fadc 	bl	80020f0 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b3e:	f000 f93b 	bl	8000db8 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	@ 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bcc <MX_I2C1_Init+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000b60:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd0 <MX_I2C1_Init+0x7c>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b64:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b70:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b76:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8e:	480e      	ldr	r0, [pc, #56]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000b90:	f000 fed6 	bl	8001940 <HAL_I2C_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b9a:	f000 f90d 	bl	8000db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000ba2:	f000 ff69 	bl	8001a78 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f000 f904 	bl	8000db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <MX_I2C1_Init+0x74>)
 8000bb4:	f000 ffab 	bl	8001b0e <HAL_I2CEx_ConfigDigitalFilter>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f8fb 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000007c 	.word	0x2000007c
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	00303d5b 	.word	0x00303d5b

08000bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bda:	4a15      	ldr	r2, [pc, #84]	@ (8000c30 <MX_USART1_UART_Init+0x5c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c18:	f001 ff9a 	bl	8002b50 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c22:	f000 f8c9 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000d0 	.word	0x200000d0
 8000c30:	40011000 	.word	0x40011000

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	@ 0x28
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4a:	4b41      	ldr	r3, [pc, #260]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a40      	ldr	r2, [pc, #256]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b3e      	ldr	r3, [pc, #248]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c62:	4b3b      	ldr	r3, [pc, #236]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a3a      	ldr	r2, [pc, #232]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b38      	ldr	r3, [pc, #224]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b35      	ldr	r3, [pc, #212]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a34      	ldr	r2, [pc, #208]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b32      	ldr	r3, [pc, #200]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b2f      	ldr	r3, [pc, #188]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	4a2e      	ldr	r2, [pc, #184]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d50 <MX_GPIO_Init+0x11c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	210c      	movs	r1, #12
 8000cae:	4829      	ldr	r0, [pc, #164]	@ (8000d54 <MX_GPIO_Init+0x120>)
 8000cb0:	f000 fe12 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cba:	4827      	ldr	r0, [pc, #156]	@ (8000d58 <MX_GPIO_Init+0x124>)
 8000cbc:	f000 fe0c 	bl	80018d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481f      	ldr	r0, [pc, #124]	@ (8000d54 <MX_GPIO_Init+0x120>)
 8000cd8:	f000 fc4a 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ce0:	2311      	movs	r3, #17
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4818      	ldr	r0, [pc, #96]	@ (8000d54 <MX_GPIO_Init+0x120>)
 8000cf4:	f000 fc3c 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000cf8:	23fe      	movs	r3, #254	@ 0xfe
 8000cfa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4814      	ldr	r0, [pc, #80]	@ (8000d5c <MX_GPIO_Init+0x128>)
 8000d0c:	f000 fc30 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	480b      	ldr	r0, [pc, #44]	@ (8000d58 <MX_GPIO_Init+0x124>)
 8000d2a:	f000 fc21 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d2e:	2310      	movs	r3, #16
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <MX_GPIO_Init+0x124>)
 8000d42:	f000 fc15 	bl	8001570 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	@ 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	40020000 	.word	0x40020000

08000d60 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d72:	f000 faf3 	bl	800135c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d76:	2301      	movs	r3, #1
 8000d78:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d82:	231f      	movs	r3, #31
 8000d84:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d86:	2387      	movs	r3, #135	@ 0x87
 8000d88:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d92:	2301      	movs	r3, #1
 8000d94:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d96:	2301      	movs	r3, #1
 8000d98:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000da2:	463b      	mov	r3, r7
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fb11 	bl	80013cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000daa:	2004      	movs	r0, #4
 8000dac:	f000 faee 	bl	800138c <HAL_MPU_Enable>

}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_Handler+0x8>

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <HAL_MspInit+0x44>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	4a0e      	ldr	r2, [pc, #56]	@ (8000e08 <HAL_MspInit+0x44>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <HAL_MspInit+0x44>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <HAL_MspInit+0x44>)
 8000de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de6:	4a08      	ldr	r2, [pc, #32]	@ (8000e08 <HAL_MspInit+0x44>)
 8000de8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_MspInit+0x44>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0aa      	sub	sp, #168	@ 0xa8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2280      	movs	r2, #128	@ 0x80
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 f817 	bl	8003e60 <memset>
  if(hi2c->Instance==I2C1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <HAL_I2C_MspInit+0xb0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d13b      	bne.n	8000eb4 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 fb36 	bl	80024bc <HAL_RCCEx_PeriphCLKConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e56:	f7ff ffaf 	bl	8000db8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <HAL_I2C_MspInit+0xb4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ec0 <HAL_I2C_MspInit+0xb4>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <HAL_I2C_MspInit+0xb4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e72:	23c0      	movs	r3, #192	@ 0xc0
 8000e74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e78:	2312      	movs	r3, #18
 8000e7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	2303      	movs	r3, #3
 8000e86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e94:	4619      	mov	r1, r3
 8000e96:	480b      	ldr	r0, [pc, #44]	@ (8000ec4 <HAL_I2C_MspInit+0xb8>)
 8000e98:	f000 fb6a 	bl	8001570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_I2C_MspInit+0xb4>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_I2C_MspInit+0xb4>)
 8000ea2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <HAL_I2C_MspInit+0xb4>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000eb4:	bf00      	nop
 8000eb6:	37a8      	adds	r7, #168	@ 0xa8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020400 	.word	0x40020400

08000ec8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0aa      	sub	sp, #168	@ 0xa8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 ffb9 	bl	8003e60 <memset>
  if(huart->Instance==USART1)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a25      	ldr	r2, [pc, #148]	@ (8000f88 <HAL_UART_MspInit+0xc0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d143      	bne.n	8000f80 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ef8:	2340      	movs	r3, #64	@ 0x40
 8000efa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000efc:	2300      	movs	r3, #0
 8000efe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4618      	mov	r0, r3
 8000f06:	f001 fad9 	bl	80024bc <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f10:	f7ff ff52 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f14:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f18:	4a1c      	ldr	r2, [pc, #112]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f20:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f30:	4a16      	ldr	r2, [pc, #88]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <HAL_UART_MspInit+0xc4>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f44:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f5e:	2307      	movs	r3, #7
 8000f60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4809      	ldr	r0, [pc, #36]	@ (8000f90 <HAL_UART_MspInit+0xc8>)
 8000f6c:	f000 fb00 	bl	8001570 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2025      	movs	r0, #37	@ 0x25
 8000f76:	f000 f9ba 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f7a:	2025      	movs	r0, #37	@ 0x25
 8000f7c:	f000 f9d3 	bl	8001326 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f80:	bf00      	nop
 8000f82:	37a8      	adds	r7, #168	@ 0xa8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <NMI_Handler+0x4>

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <MemManage_Handler+0x4>

08000fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fea:	f000 f885 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <USART1_IRQHandler+0x10>)
 8000ffa:	f001 ff49 	bl	8002e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200000d0 	.word	0x200000d0

08001008 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	@ (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001064 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001030:	f7ff ffea 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001036:	490d      	ldr	r1, [pc, #52]	@ (800106c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001038:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800104c:	4c0a      	ldr	r4, [pc, #40]	@ (8001078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105a:	f002 ff31 	bl	8003ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fd01 	bl	8000a64 <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001070:	080041a8 	.word	0x080041a8
  ldr r2, =_sbss
 8001074:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001078:	200006b0 	.word	0x200006b0

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>

0800107e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001082:	2003      	movs	r0, #3
 8001084:	f000 f928 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001088:	200f      	movs	r0, #15
 800108a:	f000 f805 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108e:	f7ff fe99 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f943 	bl	8001342 <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f90b 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	@ (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000004 	.word	0x20000004
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000008 	.word	0x20000008

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	@ (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000000c 	.word	0x2000000c
 800111c:	20000574 	.word	0x20000574

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000574 	.word	0x20000574

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	4313      	orrs	r3, r2
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <__NVIC_SetPriorityGrouping+0x40>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00
 800117c:	05fa0000 	.word	0x05fa0000

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	@ (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	@ (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	@ (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	@ 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	@ 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001360:	f3bf 8f5f 	dmb	sy
}
 8001364:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <HAL_MPU_Disable+0x28>)
 8001368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136a:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <HAL_MPU_Disable+0x28>)
 800136c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001370:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_MPU_Disable+0x2c>)
 8001374:	2200      	movs	r2, #0
 8001376:	605a      	str	r2, [r3, #4]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	e000ed90 	.word	0xe000ed90

0800138c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001394:	4a0b      	ldr	r2, [pc, #44]	@ (80013c4 <HAL_MPU_Enable+0x38>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <HAL_MPU_Enable+0x3c>)
 80013a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a2:	4a09      	ldr	r2, [pc, #36]	@ (80013c8 <HAL_MPU_Enable+0x3c>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013aa:	f3bf 8f4f 	dsb	sy
}
 80013ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013b0:	f3bf 8f6f 	isb	sy
}
 80013b4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed90 	.word	0xe000ed90
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	785a      	ldrb	r2, [r3, #1]
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <HAL_MPU_ConfigRegion+0x7c>)
 80013da:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <HAL_MPU_ConfigRegion+0x7c>)
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	4a19      	ldr	r2, [pc, #100]	@ (8001448 <HAL_MPU_ConfigRegion+0x7c>)
 80013e2:	f023 0301 	bic.w	r3, r3, #1
 80013e6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013e8:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <HAL_MPU_ConfigRegion+0x7c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7b1b      	ldrb	r3, [r3, #12]
 80013f4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7adb      	ldrb	r3, [r3, #11]
 80013fa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7a9b      	ldrb	r3, [r3, #10]
 8001402:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001404:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7b5b      	ldrb	r3, [r3, #13]
 800140a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800140c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7b9b      	ldrb	r3, [r3, #14]
 8001412:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001414:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7bdb      	ldrb	r3, [r3, #15]
 800141a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800141c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7a5b      	ldrb	r3, [r3, #9]
 8001422:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001424:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7a1b      	ldrb	r3, [r3, #8]
 800142a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800142c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001436:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001438:	6113      	str	r3, [r2, #16]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed90 	.word	0xe000ed90

0800144c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001458:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800145a:	f7ff fe61 	bl	8001120 <HAL_GetTick>
 800145e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d008      	beq.n	800147e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2280      	movs	r2, #128	@ 0x80
 8001470:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e052      	b.n	8001524 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0216 	bic.w	r2, r2, #22
 800148c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800149c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <HAL_DMA_Abort+0x62>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0208 	bic.w	r2, r2, #8
 80014bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ce:	e013      	b.n	80014f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d0:	f7ff fe26 	bl	8001120 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b05      	cmp	r3, #5
 80014dc:	d90c      	bls.n	80014f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2220      	movs	r2, #32
 80014e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2203      	movs	r2, #3
 80014e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e015      	b.n	8001524 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1e4      	bne.n	80014d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150a:	223f      	movs	r2, #63	@ 0x3f
 800150c:	409a      	lsls	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800153a:	b2db      	uxtb	r3, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d004      	beq.n	800154a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2280      	movs	r2, #128	@ 0x80
 8001544:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00c      	b.n	8001564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2205      	movs	r2, #5
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e169      	b.n	8001864 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8158 	bne.w	800185e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d005      	beq.n	80015c6 <HAL_GPIO_Init+0x56>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d017      	beq.n	8001664 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0203 	and.w	r2, r3, #3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80b2 	beq.w	800185e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	4b60      	ldr	r3, [pc, #384]	@ (800187c <HAL_GPIO_Init+0x30c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	4a5f      	ldr	r2, [pc, #380]	@ (800187c <HAL_GPIO_Init+0x30c>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001704:	6453      	str	r3, [r2, #68]	@ 0x44
 8001706:	4b5d      	ldr	r3, [pc, #372]	@ (800187c <HAL_GPIO_Init+0x30c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001712:	4a5b      	ldr	r2, [pc, #364]	@ (8001880 <HAL_GPIO_Init+0x310>)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a52      	ldr	r2, [pc, #328]	@ (8001884 <HAL_GPIO_Init+0x314>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d02b      	beq.n	8001796 <HAL_GPIO_Init+0x226>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a51      	ldr	r2, [pc, #324]	@ (8001888 <HAL_GPIO_Init+0x318>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d025      	beq.n	8001792 <HAL_GPIO_Init+0x222>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a50      	ldr	r2, [pc, #320]	@ (800188c <HAL_GPIO_Init+0x31c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01f      	beq.n	800178e <HAL_GPIO_Init+0x21e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4f      	ldr	r2, [pc, #316]	@ (8001890 <HAL_GPIO_Init+0x320>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d019      	beq.n	800178a <HAL_GPIO_Init+0x21a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4e      	ldr	r2, [pc, #312]	@ (8001894 <HAL_GPIO_Init+0x324>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x216>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4d      	ldr	r2, [pc, #308]	@ (8001898 <HAL_GPIO_Init+0x328>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x212>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4c      	ldr	r2, [pc, #304]	@ (800189c <HAL_GPIO_Init+0x32c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x20e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4b      	ldr	r2, [pc, #300]	@ (80018a0 <HAL_GPIO_Init+0x330>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x20a>
 8001776:	2307      	movs	r3, #7
 8001778:	e00e      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800177a:	2308      	movs	r3, #8
 800177c:	e00c      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800177e:	2306      	movs	r3, #6
 8001780:	e00a      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001782:	2305      	movs	r3, #5
 8001784:	e008      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001786:	2304      	movs	r3, #4
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800178a:	2303      	movs	r3, #3
 800178c:	e004      	b.n	8001798 <HAL_GPIO_Init+0x228>
 800178e:	2302      	movs	r3, #2
 8001790:	e002      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_GPIO_Init+0x228>
 8001796:	2300      	movs	r3, #0
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	f002 0203 	and.w	r2, r2, #3
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	4093      	lsls	r3, r2
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017a8:	4935      	ldr	r1, [pc, #212]	@ (8001880 <HAL_GPIO_Init+0x310>)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b6:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <HAL_GPIO_Init+0x334>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017da:	4a32      	ldr	r2, [pc, #200]	@ (80018a4 <HAL_GPIO_Init+0x334>)
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017e0:	4b30      	ldr	r3, [pc, #192]	@ (80018a4 <HAL_GPIO_Init+0x334>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001804:	4a27      	ldr	r2, [pc, #156]	@ (80018a4 <HAL_GPIO_Init+0x334>)
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800180a:	4b26      	ldr	r3, [pc, #152]	@ (80018a4 <HAL_GPIO_Init+0x334>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800182e:	4a1d      	ldr	r2, [pc, #116]	@ (80018a4 <HAL_GPIO_Init+0x334>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <HAL_GPIO_Init+0x334>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001858:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <HAL_GPIO_Init+0x334>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3301      	adds	r3, #1
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	2b0f      	cmp	r3, #15
 8001868:	f67f ae92 	bls.w	8001590 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3724      	adds	r7, #36	@ 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40013800 	.word	0x40013800
 8001884:	40020000 	.word	0x40020000
 8001888:	40020400 	.word	0x40020400
 800188c:	40020800 	.word	0x40020800
 8001890:	40020c00 	.word	0x40020c00
 8001894:	40021000 	.word	0x40021000
 8001898:	40021400 	.word	0x40021400
 800189c:	40021800 	.word	0x40021800
 80018a0:	40021c00 	.word	0x40021c00
 80018a4:	40013c00 	.word	0x40013c00

080018a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	887b      	ldrh	r3, [r7, #2]
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d002      	beq.n	80018c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e001      	b.n	80018ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	4613      	mov	r3, r2
 80018e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018e8:	787b      	ldrb	r3, [r7, #1]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ee:	887a      	ldrh	r2, [r7, #2]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80018f4:	e003      	b.n	80018fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	041a      	lsls	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	619a      	str	r2, [r3, #24]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800190a:	b480      	push	{r7}
 800190c:	b085      	sub	sp, #20
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800191c:	887a      	ldrh	r2, [r7, #2]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4013      	ands	r3, r2
 8001922:	041a      	lsls	r2, r3, #16
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43d9      	mvns	r1, r3
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	400b      	ands	r3, r1
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	619a      	str	r2, [r3, #24]
}
 8001932:	bf00      	nop
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e08b      	b.n	8001a6a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fa50 	bl	8000e0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2224      	movs	r2, #36	@ 0x24
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0201 	bic.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	e006      	b.n	80019c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80019c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d108      	bne.n	80019e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	e007      	b.n	80019f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a74 <HAL_I2C_Init+0x134>)
 80019fe:	430b      	orrs	r3, r1
 8001a00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69d9      	ldr	r1, [r3, #28]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	02008000 	.word	0x02008000

08001a78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d138      	bne.n	8001b00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e032      	b.n	8001b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2224      	movs	r2, #36	@ 0x24
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0201 	bic.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001aca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6819      	ldr	r1, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	e000      	b.n	8001b02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b00:	2302      	movs	r3, #2
  }
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b085      	sub	sp, #20
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b20      	cmp	r3, #32
 8001b22:	d139      	bne.n	8001b98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e033      	b.n	8001b9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2224      	movs	r2, #36	@ 0x24
 8001b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0201 	bic.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e000      	b.n	8001b9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b98:	2302      	movs	r3, #2
  }
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e291      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8087 	beq.w	8001cda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bcc:	4b96      	ldr	r3, [pc, #600]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bd8:	4b93      	ldr	r3, [pc, #588]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d112      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62>
 8001be4:	4b90      	ldr	r3, [pc, #576]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001bf0:	d10b      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d06c      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x130>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d168      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e26b      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x7a>
 8001c14:	4b84      	ldr	r3, [pc, #528]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a83      	ldr	r2, [pc, #524]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	e02e      	b.n	8001c80 <HAL_RCC_OscConfig+0xd8>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x9c>
 8001c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	4b7c      	ldr	r3, [pc, #496]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a7b      	ldr	r2, [pc, #492]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e01d      	b.n	8001c80 <HAL_RCC_OscConfig+0xd8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0xc0>
 8001c4e:	4b76      	ldr	r3, [pc, #472]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a75      	ldr	r2, [pc, #468]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b73      	ldr	r3, [pc, #460]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a72      	ldr	r2, [pc, #456]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e00b      	b.n	8001c80 <HAL_RCC_OscConfig+0xd8>
 8001c68:	4b6f      	ldr	r3, [pc, #444]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b6c      	ldr	r3, [pc, #432]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a6b      	ldr	r2, [pc, #428]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff fa4a 	bl	8001120 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fa46 	bl	8001120 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	@ 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e21f      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b61      	ldr	r3, [pc, #388]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0xe8>
 8001cae:	e014      	b.n	8001cda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fa36 	bl	8001120 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fa32 	bl	8001120 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	@ 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e20b      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	4b57      	ldr	r3, [pc, #348]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x110>
 8001cd6:	e000      	b.n	8001cda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d069      	beq.n	8001dba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce6:	4b50      	ldr	r3, [pc, #320]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d11c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x190>
 8001cfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d116      	bne.n	8001d38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0a:	4b47      	ldr	r3, [pc, #284]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_RCC_OscConfig+0x17a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e1df      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d22:	4b41      	ldr	r3, [pc, #260]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	493d      	ldr	r1, [pc, #244]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	e040      	b.n	8001dba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d023      	beq.n	8001d88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d40:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a38      	ldr	r2, [pc, #224]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f9e8 	bl	8001120 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d54:	f7ff f9e4 	bl	8001120 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1bd      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	4b30      	ldr	r3, [pc, #192]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d72:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4929      	ldr	r1, [pc, #164]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
 8001d86:	e018      	b.n	8001dba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a26      	ldr	r2, [pc, #152]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f9c4 	bl	8001120 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7ff f9c0 	bl	8001120 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e199      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d038      	beq.n	8001e38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d019      	beq.n	8001e02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd2:	4a15      	ldr	r2, [pc, #84]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dda:	f7ff f9a1 	bl	8001120 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de2:	f7ff f99d 	bl	8001120 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e176      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x23a>
 8001e00:	e01a      	b.n	8001e38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e06:	4a08      	ldr	r2, [pc, #32]	@ (8001e28 <HAL_RCC_OscConfig+0x280>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff f987 	bl	8001120 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e16:	f7ff f983 	bl	8001120 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d903      	bls.n	8001e2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e15c      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
 8001e28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b91      	ldr	r3, [pc, #580]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ee      	bne.n	8001e16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a4 	beq.w	8001f8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e46:	4b8b      	ldr	r3, [pc, #556]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10d      	bne.n	8001e6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b88      	ldr	r3, [pc, #544]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	4a87      	ldr	r2, [pc, #540]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5e:	4b85      	ldr	r3, [pc, #532]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6e:	4b82      	ldr	r3, [pc, #520]	@ (8002078 <HAL_RCC_OscConfig+0x4d0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d118      	bne.n	8001eac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002078 <HAL_RCC_OscConfig+0x4d0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002078 <HAL_RCC_OscConfig+0x4d0>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e86:	f7ff f94b 	bl	8001120 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8e:	f7ff f947 	bl	8001120 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b64      	cmp	r3, #100	@ 0x64
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e120      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea0:	4b75      	ldr	r3, [pc, #468]	@ (8002078 <HAL_RCC_OscConfig+0x4d0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x31a>
 8001eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb8:	4a6e      	ldr	r2, [pc, #440]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec0:	e02d      	b.n	8001f1e <HAL_RCC_OscConfig+0x376>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x33c>
 8001eca:	4b6a      	ldr	r3, [pc, #424]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ece:	4a69      	ldr	r2, [pc, #420]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed6:	4b67      	ldr	r3, [pc, #412]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	4a66      	ldr	r2, [pc, #408]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001edc:	f023 0304 	bic.w	r3, r3, #4
 8001ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee2:	e01c      	b.n	8001f1e <HAL_RCC_OscConfig+0x376>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b05      	cmp	r3, #5
 8001eea:	d10c      	bne.n	8001f06 <HAL_RCC_OscConfig+0x35e>
 8001eec:	4b61      	ldr	r3, [pc, #388]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef0:	4a60      	ldr	r2, [pc, #384]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efc:	4a5d      	ldr	r2, [pc, #372]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f04:	e00b      	b.n	8001f1e <HAL_RCC_OscConfig+0x376>
 8001f06:	4b5b      	ldr	r3, [pc, #364]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f0a:	4a5a      	ldr	r2, [pc, #360]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f12:	4b58      	ldr	r3, [pc, #352]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f16:	4a57      	ldr	r2, [pc, #348]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001f18:	f023 0304 	bic.w	r3, r3, #4
 8001f1c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d015      	beq.n	8001f52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7ff f8fb 	bl	8001120 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff f8f7 	bl	8001120 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e0ce      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f44:	4b4b      	ldr	r3, [pc, #300]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0ee      	beq.n	8001f2e <HAL_RCC_OscConfig+0x386>
 8001f50:	e014      	b.n	8001f7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7ff f8e5 	bl	8001120 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5a:	f7ff f8e1 	bl	8001120 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e0b8      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	4b40      	ldr	r3, [pc, #256]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1ee      	bne.n	8001f5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f7c:	7dfb      	ldrb	r3, [r7, #23]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d105      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b3c      	ldr	r3, [pc, #240]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a3b      	ldr	r2, [pc, #236]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80a4 	beq.w	80020e0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f98:	4b36      	ldr	r3, [pc, #216]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d06b      	beq.n	800207c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d149      	bne.n	8002040 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b31      	ldr	r3, [pc, #196]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a30      	ldr	r2, [pc, #192]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f8b2 	bl	8001120 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7ff f8ae 	bl	8001120 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e087      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	4b28      	ldr	r3, [pc, #160]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	4313      	orrs	r3, r2
 8002004:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002006:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800200a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200c:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a18      	ldr	r2, [pc, #96]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff f882 	bl	8001120 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f87e 	bl	8001120 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e057      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x478>
 800203e:	e04f      	b.n	80020e0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0b      	ldr	r2, [pc, #44]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7ff f868 	bl	8001120 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff f864 	bl	8001120 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e03d      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <HAL_RCC_OscConfig+0x4cc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x4ac>
 8002072:	e035      	b.n	80020e0 <HAL_RCC_OscConfig+0x538>
 8002074:	40023800 	.word	0x40023800
 8002078:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <HAL_RCC_OscConfig+0x544>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d028      	beq.n	80020dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d121      	bne.n	80020dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d11a      	bne.n	80020dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020ac:	4013      	ands	r3, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d111      	bne.n	80020dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	3b01      	subs	r3, #1
 80020c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800

080020f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0d0      	b.n	80022aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002108:	4b6a      	ldr	r3, [pc, #424]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d910      	bls.n	8002138 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b67      	ldr	r3, [pc, #412]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 020f 	bic.w	r2, r3, #15
 800211e:	4965      	ldr	r1, [pc, #404]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b63      	ldr	r3, [pc, #396]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0b8      	b.n	80022aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002150:	4b59      	ldr	r3, [pc, #356]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a58      	ldr	r2, [pc, #352]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002156:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800215a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002168:	4b53      	ldr	r3, [pc, #332]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	4a52      	ldr	r2, [pc, #328]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002172:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002174:	4b50      	ldr	r3, [pc, #320]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	494d      	ldr	r1, [pc, #308]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d040      	beq.n	8002214 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	4b47      	ldr	r3, [pc, #284]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d115      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e07f      	b.n	80022aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d107      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b2:	4b41      	ldr	r3, [pc, #260]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e073      	b.n	80022aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c2:	4b3d      	ldr	r3, [pc, #244]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e06b      	b.n	80022aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021d2:	4b39      	ldr	r3, [pc, #228]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f023 0203 	bic.w	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4936      	ldr	r1, [pc, #216]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e4:	f7fe ff9c 	bl	8001120 <HAL_GetTick>
 80021e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7fe ff98 	bl	8001120 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e053      	b.n	80022aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	4b2d      	ldr	r3, [pc, #180]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 020c 	and.w	r2, r3, #12
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	429a      	cmp	r2, r3
 8002212:	d1eb      	bne.n	80021ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002214:	4b27      	ldr	r3, [pc, #156]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d210      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b24      	ldr	r3, [pc, #144]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 020f 	bic.w	r2, r3, #15
 800222a:	4922      	ldr	r1, [pc, #136]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e032      	b.n	80022aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002250:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4916      	ldr	r1, [pc, #88]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800226e:	4b12      	ldr	r3, [pc, #72]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	490e      	ldr	r1, [pc, #56]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002282:	f000 f821 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 8002286:	4602      	mov	r2, r0
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_RCC_ClockConfig+0x1c8>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	490a      	ldr	r1, [pc, #40]	@ (80022bc <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	5ccb      	ldrb	r3, [r1, r3]
 8002296:	fa22 f303 	lsr.w	r3, r2, r3
 800229a:	4a09      	ldr	r2, [pc, #36]	@ (80022c0 <HAL_RCC_ClockConfig+0x1d0>)
 800229c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <HAL_RCC_ClockConfig+0x1d4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe fef8 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023c00 	.word	0x40023c00
 80022b8:	40023800 	.word	0x40023800
 80022bc:	0800407c 	.word	0x0800407c
 80022c0:	20000004 	.word	0x20000004
 80022c4:	20000008 	.word	0x20000008

080022c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b090      	sub	sp, #64	@ 0x40
 80022ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80022d4:	2300      	movs	r3, #0
 80022d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022d8:	2300      	movs	r3, #0
 80022da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e0:	4b59      	ldr	r3, [pc, #356]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x180>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d00d      	beq.n	8002308 <HAL_RCC_GetSysClockFreq+0x40>
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	f200 80a1 	bhi.w	8002434 <HAL_RCC_GetSysClockFreq+0x16c>
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <HAL_RCC_GetSysClockFreq+0x34>
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d003      	beq.n	8002302 <HAL_RCC_GetSysClockFreq+0x3a>
 80022fa:	e09b      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022fc:	4b53      	ldr	r3, [pc, #332]	@ (800244c <HAL_RCC_GetSysClockFreq+0x184>)
 80022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002300:	e09b      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002302:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x188>)
 8002304:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002306:	e098      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002308:	4b4f      	ldr	r3, [pc, #316]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x180>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002310:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002312:	4b4d      	ldr	r3, [pc, #308]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x180>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d028      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231e:	4b4a      	ldr	r3, [pc, #296]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x180>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	099b      	lsrs	r3, r3, #6
 8002324:	2200      	movs	r2, #0
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	627a      	str	r2, [r7, #36]	@ 0x24
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002330:	2100      	movs	r1, #0
 8002332:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x188>)
 8002334:	fb03 f201 	mul.w	r2, r3, r1
 8002338:	2300      	movs	r3, #0
 800233a:	fb00 f303 	mul.w	r3, r0, r3
 800233e:	4413      	add	r3, r2
 8002340:	4a43      	ldr	r2, [pc, #268]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x188>)
 8002342:	fba0 1202 	umull	r1, r2, r0, r2
 8002346:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002348:	460a      	mov	r2, r1
 800234a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800234c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800234e:	4413      	add	r3, r2
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002354:	2200      	movs	r2, #0
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	61fa      	str	r2, [r7, #28]
 800235a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800235e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002362:	f7fd ff6f 	bl	8000244 <__aeabi_uldivmod>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4613      	mov	r3, r2
 800236c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800236e:	e053      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002370:	4b35      	ldr	r3, [pc, #212]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x180>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	2200      	movs	r2, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	617a      	str	r2, [r7, #20]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002382:	f04f 0b00 	mov.w	fp, #0
 8002386:	4652      	mov	r2, sl
 8002388:	465b      	mov	r3, fp
 800238a:	f04f 0000 	mov.w	r0, #0
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	0159      	lsls	r1, r3, #5
 8002394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002398:	0150      	lsls	r0, r2, #5
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	ebb2 080a 	subs.w	r8, r2, sl
 80023a2:	eb63 090b 	sbc.w	r9, r3, fp
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023ba:	ebb2 0408 	subs.w	r4, r2, r8
 80023be:	eb63 0509 	sbc.w	r5, r3, r9
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	00eb      	lsls	r3, r5, #3
 80023cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023d0:	00e2      	lsls	r2, r4, #3
 80023d2:	4614      	mov	r4, r2
 80023d4:	461d      	mov	r5, r3
 80023d6:	eb14 030a 	adds.w	r3, r4, sl
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	eb45 030b 	adc.w	r3, r5, fp
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ee:	4629      	mov	r1, r5
 80023f0:	028b      	lsls	r3, r1, #10
 80023f2:	4621      	mov	r1, r4
 80023f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f8:	4621      	mov	r1, r4
 80023fa:	028a      	lsls	r2, r1, #10
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002402:	2200      	movs	r2, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	60fa      	str	r2, [r7, #12]
 8002408:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800240c:	f7fd ff1a 	bl	8000244 <__aeabi_uldivmod>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4613      	mov	r3, r2
 8002416:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x180>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	3301      	adds	r3, #1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002428:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002432:	e002      	b.n	800243a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_RCC_GetSysClockFreq+0x184>)
 8002436:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800243c:	4618      	mov	r0, r3
 800243e:	3740      	adds	r7, #64	@ 0x40
 8002440:	46bd      	mov	sp, r7
 8002442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	00f42400 	.word	0x00f42400
 8002450:	017d7840 	.word	0x017d7840

08002454 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002458:	4b03      	ldr	r3, [pc, #12]	@ (8002468 <HAL_RCC_GetHCLKFreq+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000004 	.word	0x20000004

0800246c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002470:	f7ff fff0 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0a9b      	lsrs	r3, r3, #10
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4903      	ldr	r1, [pc, #12]	@ (8002490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	0800408c 	.word	0x0800408c

08002494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002498:	f7ff ffdc 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0b5b      	lsrs	r3, r3, #13
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4903      	ldr	r1, [pc, #12]	@ (80024b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40023800 	.word	0x40023800
 80024b8:	0800408c 	.word	0x0800408c

080024bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d012      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024e0:	4b65      	ldr	r3, [pc, #404]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a64      	ldr	r2, [pc, #400]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024ea:	6093      	str	r3, [r2, #8]
 80024ec:	4b62      	ldr	r3, [pc, #392]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	4960      	ldr	r1, [pc, #384]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002502:	2301      	movs	r3, #1
 8002504:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d017      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002512:	4b59      	ldr	r3, [pc, #356]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002518:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002520:	4955      	ldr	r1, [pc, #340]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800252c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002530:	d101      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002532:	2301      	movs	r3, #1
 8002534:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800253e:	2301      	movs	r3, #1
 8002540:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d017      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800254e:	4b4a      	ldr	r3, [pc, #296]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002554:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	4946      	ldr	r1, [pc, #280]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002568:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800256c:	d101      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800256e:	2301      	movs	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800257a:	2301      	movs	r3, #1
 800257c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 808b 	beq.w	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	4b3a      	ldr	r3, [pc, #232]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	4a39      	ldr	r2, [pc, #228]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002596:	6413      	str	r3, [r2, #64]	@ 0x40
 8002598:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025a4:	4b35      	ldr	r3, [pc, #212]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a34      	ldr	r2, [pc, #208]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b0:	f7fe fdb6 	bl	8001120 <HAL_GetTick>
 80025b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b8:	f7fe fdb2 	bl	8001120 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e2bc      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025ca:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025d6:	4b28      	ldr	r3, [pc, #160]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d035      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d02e      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025f4:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002602:	4a1d      	ldr	r2, [pc, #116]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002608:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800260a:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800260e:	4a1a      	ldr	r2, [pc, #104]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002610:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002614:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002616:	4a18      	ldr	r2, [pc, #96]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800261c:	4b16      	ldr	r3, [pc, #88]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d114      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7fe fd7a 	bl	8001120 <HAL_GetTick>
 800262c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	e00a      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7fe fd76 	bl	8001120 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e27e      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002646:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ee      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800265a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800265e:	d111      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002660:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800266c:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800266e:	400b      	ands	r3, r1
 8002670:	4901      	ldr	r1, [pc, #4]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
 8002676:	e00b      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002678:	40023800 	.word	0x40023800
 800267c:	40007000 	.word	0x40007000
 8002680:	0ffffcff 	.word	0x0ffffcff
 8002684:	4ba4      	ldr	r3, [pc, #656]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4aa3      	ldr	r2, [pc, #652]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800268a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800268e:	6093      	str	r3, [r2, #8]
 8002690:	4ba1      	ldr	r3, [pc, #644]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002692:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	499e      	ldr	r1, [pc, #632]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d010      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026ae:	4b9a      	ldr	r3, [pc, #616]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026b4:	4a98      	ldr	r2, [pc, #608]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80026be:	4b96      	ldr	r3, [pc, #600]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c8:	4993      	ldr	r1, [pc, #588]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ea:	498b      	ldr	r1, [pc, #556]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026fe:	4b86      	ldr	r3, [pc, #536]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002704:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800270c:	4982      	ldr	r1, [pc, #520]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002720:	4b7d      	ldr	r3, [pc, #500]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002726:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800272e:	497a      	ldr	r1, [pc, #488]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002742:	4b75      	ldr	r3, [pc, #468]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002748:	f023 0203 	bic.w	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	4971      	ldr	r1, [pc, #452]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002764:	4b6c      	ldr	r3, [pc, #432]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276a:	f023 020c 	bic.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002772:	4969      	ldr	r1, [pc, #420]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002786:	4b64      	ldr	r3, [pc, #400]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	4960      	ldr	r1, [pc, #384]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b6:	4958      	ldr	r1, [pc, #352]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ca:	4b53      	ldr	r3, [pc, #332]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d8:	494f      	ldr	r1, [pc, #316]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027fa:	4947      	ldr	r1, [pc, #284]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800280e:	4b42      	ldr	r3, [pc, #264]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002814:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281c:	493e      	ldr	r1, [pc, #248]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002830:	4b39      	ldr	r3, [pc, #228]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002836:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283e:	4936      	ldr	r1, [pc, #216]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d011      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002852:	4b31      	ldr	r3, [pc, #196]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002858:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002860:	492d      	ldr	r1, [pc, #180]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002870:	d101      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002872:	2301      	movs	r3, #1
 8002874:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002882:	4b25      	ldr	r3, [pc, #148]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002888:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002890:	4921      	ldr	r1, [pc, #132]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b2:	4919      	ldr	r1, [pc, #100]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80028c6:	4b14      	ldr	r3, [pc, #80]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028cc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028d4:	4910      	ldr	r1, [pc, #64]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d006      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 809d 	beq.w	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028f0:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a08      	ldr	r2, [pc, #32]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe fc10 	bl	8001120 <HAL_GetTick>
 8002900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002902:	e00b      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002904:	f7fe fc0c 	bl	8001120 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d904      	bls.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e116      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800291c:	4b8b      	ldr	r3, [pc, #556]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ed      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d017      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	2b00      	cmp	r3, #0
 800293a:	d113      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800293c:	4b83      	ldr	r3, [pc, #524]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800293e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002942:	0e1b      	lsrs	r3, r3, #24
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	019a      	lsls	r2, r3, #6
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	061b      	lsls	r3, r3, #24
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	071b      	lsls	r3, r3, #28
 800295c:	497b      	ldr	r1, [pc, #492]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002982:	2b00      	cmp	r3, #0
 8002984:	d024      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800298e:	d11f      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002990:	4b6e      	ldr	r3, [pc, #440]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002996:	0f1b      	lsrs	r3, r3, #28
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	019a      	lsls	r2, r3, #6
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	061b      	lsls	r3, r3, #24
 80029aa:	431a      	orrs	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	071b      	lsls	r3, r3, #28
 80029b0:	4966      	ldr	r1, [pc, #408]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029b8:	4b64      	ldr	r3, [pc, #400]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80029ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029be:	f023 021f 	bic.w	r2, r3, #31
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	4960      	ldr	r1, [pc, #384]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	019a      	lsls	r2, r3, #6
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	071b      	lsls	r3, r3, #28
 80029f0:	4956      	ldr	r1, [pc, #344]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029f8:	4b54      	ldr	r3, [pc, #336]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a53      	ldr	r2, [pc, #332]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80029fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a04:	f7fe fb8c 	bl	8001120 <HAL_GetTick>
 8002a08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a0c:	f7fe fb88 	bl	8001120 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	@ 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e092      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a1e:	4b4b      	ldr	r3, [pc, #300]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f040 8088 	bne.w	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a32:	4b46      	ldr	r3, [pc, #280]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a45      	ldr	r2, [pc, #276]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a3e:	f7fe fb6f 	bl	8001120 <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a46:	f7fe fb6b 	bl	8001120 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b64      	cmp	r3, #100	@ 0x64
 8002a52:	d901      	bls.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e075      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a58:	4b3c      	ldr	r3, [pc, #240]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a64:	d0ef      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d024      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d120      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a94:	0c1b      	lsrs	r3, r3, #16
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	019a      	lsls	r2, r3, #6
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	061b      	lsls	r3, r3, #24
 8002aae:	4927      	ldr	r1, [pc, #156]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ab6:	4b25      	ldr	r3, [pc, #148]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002abc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	4920      	ldr	r1, [pc, #128]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d018      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ae4:	d113      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ae6:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aec:	0e1b      	lsrs	r3, r3, #24
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	019a      	lsls	r2, r3, #6
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	041b      	lsls	r3, r3, #16
 8002b00:	431a      	orrs	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	4911      	ldr	r1, [pc, #68]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a0e      	ldr	r2, [pc, #56]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1a:	f7fe fb01 	bl	8001120 <HAL_GetTick>
 8002b1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b22:	f7fe fafd 	bl	8001120 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b64      	cmp	r3, #100	@ 0x64
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e007      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b40:	d1ef      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e040      	b.n	8002be4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe f9a8 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	@ 0x24
 8002b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fed0 	bl	800393c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fc69 	bl	8003474 <UART_SetConfig>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e01b      	b.n	8002be4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 ff4f 	bl	8003a80 <UART_CheckIdleState>
 8002be2:	4603      	mov	r3, r0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c00:	2b20      	cmp	r3, #32
 8002c02:	d177      	bne.n	8002cf4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_UART_Transmit+0x24>
 8002c0a:	88fb      	ldrh	r3, [r7, #6]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e070      	b.n	8002cf6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2221      	movs	r2, #33	@ 0x21
 8002c20:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c22:	f7fe fa7d 	bl	8001120 <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	88fa      	ldrh	r2, [r7, #6]
 8002c2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c40:	d108      	bne.n	8002c54 <HAL_UART_Transmit+0x68>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d104      	bne.n	8002c54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e003      	b.n	8002c5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c5c:	e02f      	b.n	8002cbe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2200      	movs	r2, #0
 8002c66:	2180      	movs	r1, #128	@ 0x80
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 ff60 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d004      	beq.n	8002c7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e03b      	b.n	8002cf6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	3302      	adds	r3, #2
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	e007      	b.n	8002cac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1c9      	bne.n	8002c5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2140      	movs	r1, #64	@ 0x40
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 ff2a 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e005      	b.n	8002cf6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b08a      	sub	sp, #40	@ 0x28
 8002d02:	af02      	add	r7, sp, #8
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	f040 80b5 	bne.w	8002e84 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_UART_Receive+0x28>
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0ad      	b.n	8002e86 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2222      	movs	r2, #34	@ 0x22
 8002d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d40:	f7fe f9ee 	bl	8001120 <HAL_GetTick>
 8002d44:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	88fa      	ldrh	r2, [r7, #6]
 8002d4a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5e:	d10e      	bne.n	8002d7e <HAL_UART_Receive+0x80>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_UART_Receive+0x76>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002d6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d72:	e02d      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	22ff      	movs	r2, #255	@ 0xff
 8002d78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d7c:	e028      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10d      	bne.n	8002da2 <HAL_UART_Receive+0xa4>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d104      	bne.n	8002d98 <HAL_UART_Receive+0x9a>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	22ff      	movs	r2, #255	@ 0xff
 8002d92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002d96:	e01b      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	227f      	movs	r2, #127	@ 0x7f
 8002d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002da0:	e016      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002daa:	d10d      	bne.n	8002dc8 <HAL_UART_Receive+0xca>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_UART_Receive+0xc0>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	227f      	movs	r2, #127	@ 0x7f
 8002db8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002dbc:	e008      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	223f      	movs	r2, #63	@ 0x3f
 8002dc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002dc6:	e003      	b.n	8002dd0 <HAL_UART_Receive+0xd2>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002dd6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de0:	d108      	bne.n	8002df4 <HAL_UART_Receive+0xf6>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d104      	bne.n	8002df4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	e003      	b.n	8002dfc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002dfc:	e036      	b.n	8002e6c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2120      	movs	r1, #32
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fe90 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e032      	b.n	8002e86 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	8a7b      	ldrh	r3, [r7, #18]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e00c      	b.n	8002e5a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	8a7b      	ldrh	r3, [r7, #18]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	3301      	adds	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1c2      	bne.n	8002dfe <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
  }
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b0ba      	sub	sp, #232	@ 0xe8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002eb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002eba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d115      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00f      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8297 	beq.w	800341c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
      }
      return;
 8002ef6:	e291      	b.n	800341c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8117 	beq.w	8003130 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002f12:	4b85      	ldr	r3, [pc, #532]	@ (8003128 <HAL_UART_IRQHandler+0x298>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 810a 	beq.w	8003130 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d011      	beq.n	8002f4c <HAL_UART_IRQHandler+0xbc>
 8002f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d011      	beq.n	8002f7c <HAL_UART_IRQHandler+0xec>
 8002f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00b      	beq.n	8002f7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2202      	movs	r2, #2
 8002f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f72:	f043 0204 	orr.w	r2, r3, #4
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d011      	beq.n	8002fac <HAL_UART_IRQHandler+0x11c>
 8002f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2204      	movs	r2, #4
 8002f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d017      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d105      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00b      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fde:	f043 0208 	orr.w	r2, r3, #8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d012      	beq.n	800301a <HAL_UART_IRQHandler+0x18a>
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ff8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00c      	beq.n	800301a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003010:	f043 0220 	orr.w	r2, r3, #32
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 81fd 	beq.w	8003420 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003054:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003062:	2b40      	cmp	r3, #64	@ 0x40
 8003064:	d005      	beq.n	8003072 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800306a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	d04f      	beq.n	8003112 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fdc8 	bl	8003c08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	d141      	bne.n	800310a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3308      	adds	r3, #8
 800308c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800309c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3308      	adds	r3, #8
 80030ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80030b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80030b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80030be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80030ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1d9      	bne.n	8003086 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d013      	beq.n	8003102 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030de:	4a13      	ldr	r2, [pc, #76]	@ (800312c <HAL_UART_IRQHandler+0x29c>)
 80030e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fa20 	bl	800152c <HAL_DMA_Abort_IT>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d017      	beq.n	8003122 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80030fc:	4610      	mov	r0, r2
 80030fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003100:	e00f      	b.n	8003122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f9a0 	bl	8003448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003108:	e00b      	b.n	8003122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f99c 	bl	8003448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	e007      	b.n	8003122 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f998 	bl	8003448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003120:	e17e      	b.n	8003420 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003122:	bf00      	nop
    return;
 8003124:	e17c      	b.n	8003420 <HAL_UART_IRQHandler+0x590>
 8003126:	bf00      	nop
 8003128:	04000120 	.word	0x04000120
 800312c:	08003cd1 	.word	0x08003cd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 814c 	bne.w	80033d2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800313a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8145 	beq.w	80033d2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 813e 	beq.w	80033d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2210      	movs	r2, #16
 800315c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003168:	2b40      	cmp	r3, #64	@ 0x40
 800316a:	f040 80b6 	bne.w	80032da <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800317a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8150 	beq.w	8003424 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800318a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800318e:	429a      	cmp	r2, r3
 8003190:	f080 8148 	bcs.w	8003424 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800319a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031a8:	f000 8086 	beq.w	80032b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80031c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80031da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80031e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80031ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1da      	bne.n	80031ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3308      	adds	r3, #8
 80031fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3308      	adds	r3, #8
 8003216:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800321a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800321e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003220:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003222:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800322c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e1      	bne.n	80031f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3308      	adds	r3, #8
 8003238:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3308      	adds	r3, #8
 8003252:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003256:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003258:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800325c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1e3      	bne.n	8003232 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003288:	f023 0310 	bic.w	r3, r3, #16
 800328c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800329a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800329c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80032a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e4      	bne.n	8003278 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe f8ca 	bl	800144c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8c2 	bl	800345c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032d8:	e0a4      	b.n	8003424 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8096 	beq.w	8003428 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80032fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8091 	beq.w	8003428 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003316:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800331a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003328:	647b      	str	r3, [r7, #68]	@ 0x44
 800332a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800332e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e4      	bne.n	8003306 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3308      	adds	r3, #8
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	e853 3f00 	ldrex	r3, [r3]
 800334a:	623b      	str	r3, [r7, #32]
   return(result);
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3308      	adds	r3, #8
 800335c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003360:	633a      	str	r2, [r7, #48]	@ 0x30
 8003362:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800336e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e3      	bne.n	800333c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	e853 3f00 	ldrex	r3, [r3]
 8003394:	60fb      	str	r3, [r7, #12]
   return(result);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f023 0310 	bic.w	r3, r3, #16
 800339c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	617b      	str	r3, [r7, #20]
   return(result);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1e4      	bne.n	8003388 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f846 	bl	800345c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033d0:	e02a      	b.n	8003428 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00e      	beq.n	80033fc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d008      	beq.n	80033fc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01c      	beq.n	800342c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
    }
    return;
 80033fa:	e017      	b.n	800342c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <HAL_UART_IRQHandler+0x59e>
 8003408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800340c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00c      	beq.n	800342e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fc71 	bl	8003cfc <UART_EndTransmit_IT>
    return;
 800341a:	e008      	b.n	800342e <HAL_UART_IRQHandler+0x59e>
      return;
 800341c:	bf00      	nop
 800341e:	e006      	b.n	800342e <HAL_UART_IRQHandler+0x59e>
    return;
 8003420:	bf00      	nop
 8003422:	e004      	b.n	800342e <HAL_UART_IRQHandler+0x59e>
      return;
 8003424:	bf00      	nop
 8003426:	e002      	b.n	800342e <HAL_UART_IRQHandler+0x59e>
      return;
 8003428:	bf00      	nop
 800342a:	e000      	b.n	800342e <HAL_UART_IRQHandler+0x59e>
    return;
 800342c:	bf00      	nop
  }

}
 800342e:	37e8      	adds	r7, #232	@ 0xe8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4ba6      	ldr	r3, [pc, #664]	@ (8003738 <UART_SetConfig+0x2c4>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6812      	ldr	r2, [r2, #0]
 80034a6:	6979      	ldr	r1, [r7, #20]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a94      	ldr	r2, [pc, #592]	@ (800373c <UART_SetConfig+0x2c8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d120      	bne.n	8003532 <UART_SetConfig+0xbe>
 80034f0:	4b93      	ldr	r3, [pc, #588]	@ (8003740 <UART_SetConfig+0x2cc>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d816      	bhi.n	800352c <UART_SetConfig+0xb8>
 80034fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003504 <UART_SetConfig+0x90>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003515 	.word	0x08003515
 8003508:	08003521 	.word	0x08003521
 800350c:	0800351b 	.word	0x0800351b
 8003510:	08003527 	.word	0x08003527
 8003514:	2301      	movs	r3, #1
 8003516:	77fb      	strb	r3, [r7, #31]
 8003518:	e150      	b.n	80037bc <UART_SetConfig+0x348>
 800351a:	2302      	movs	r3, #2
 800351c:	77fb      	strb	r3, [r7, #31]
 800351e:	e14d      	b.n	80037bc <UART_SetConfig+0x348>
 8003520:	2304      	movs	r3, #4
 8003522:	77fb      	strb	r3, [r7, #31]
 8003524:	e14a      	b.n	80037bc <UART_SetConfig+0x348>
 8003526:	2308      	movs	r3, #8
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e147      	b.n	80037bc <UART_SetConfig+0x348>
 800352c:	2310      	movs	r3, #16
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e144      	b.n	80037bc <UART_SetConfig+0x348>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a83      	ldr	r2, [pc, #524]	@ (8003744 <UART_SetConfig+0x2d0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d132      	bne.n	80035a2 <UART_SetConfig+0x12e>
 800353c:	4b80      	ldr	r3, [pc, #512]	@ (8003740 <UART_SetConfig+0x2cc>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003542:	f003 030c 	and.w	r3, r3, #12
 8003546:	2b0c      	cmp	r3, #12
 8003548:	d828      	bhi.n	800359c <UART_SetConfig+0x128>
 800354a:	a201      	add	r2, pc, #4	@ (adr r2, 8003550 <UART_SetConfig+0xdc>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003585 	.word	0x08003585
 8003554:	0800359d 	.word	0x0800359d
 8003558:	0800359d 	.word	0x0800359d
 800355c:	0800359d 	.word	0x0800359d
 8003560:	08003591 	.word	0x08003591
 8003564:	0800359d 	.word	0x0800359d
 8003568:	0800359d 	.word	0x0800359d
 800356c:	0800359d 	.word	0x0800359d
 8003570:	0800358b 	.word	0x0800358b
 8003574:	0800359d 	.word	0x0800359d
 8003578:	0800359d 	.word	0x0800359d
 800357c:	0800359d 	.word	0x0800359d
 8003580:	08003597 	.word	0x08003597
 8003584:	2300      	movs	r3, #0
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e118      	b.n	80037bc <UART_SetConfig+0x348>
 800358a:	2302      	movs	r3, #2
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e115      	b.n	80037bc <UART_SetConfig+0x348>
 8003590:	2304      	movs	r3, #4
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e112      	b.n	80037bc <UART_SetConfig+0x348>
 8003596:	2308      	movs	r3, #8
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e10f      	b.n	80037bc <UART_SetConfig+0x348>
 800359c:	2310      	movs	r3, #16
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e10c      	b.n	80037bc <UART_SetConfig+0x348>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a68      	ldr	r2, [pc, #416]	@ (8003748 <UART_SetConfig+0x2d4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d120      	bne.n	80035ee <UART_SetConfig+0x17a>
 80035ac:	4b64      	ldr	r3, [pc, #400]	@ (8003740 <UART_SetConfig+0x2cc>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80035b6:	2b30      	cmp	r3, #48	@ 0x30
 80035b8:	d013      	beq.n	80035e2 <UART_SetConfig+0x16e>
 80035ba:	2b30      	cmp	r3, #48	@ 0x30
 80035bc:	d814      	bhi.n	80035e8 <UART_SetConfig+0x174>
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d009      	beq.n	80035d6 <UART_SetConfig+0x162>
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d810      	bhi.n	80035e8 <UART_SetConfig+0x174>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <UART_SetConfig+0x15c>
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d006      	beq.n	80035dc <UART_SetConfig+0x168>
 80035ce:	e00b      	b.n	80035e8 <UART_SetConfig+0x174>
 80035d0:	2300      	movs	r3, #0
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e0f2      	b.n	80037bc <UART_SetConfig+0x348>
 80035d6:	2302      	movs	r3, #2
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	e0ef      	b.n	80037bc <UART_SetConfig+0x348>
 80035dc:	2304      	movs	r3, #4
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e0ec      	b.n	80037bc <UART_SetConfig+0x348>
 80035e2:	2308      	movs	r3, #8
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e0e9      	b.n	80037bc <UART_SetConfig+0x348>
 80035e8:	2310      	movs	r3, #16
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e0e6      	b.n	80037bc <UART_SetConfig+0x348>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a56      	ldr	r2, [pc, #344]	@ (800374c <UART_SetConfig+0x2d8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d120      	bne.n	800363a <UART_SetConfig+0x1c6>
 80035f8:	4b51      	ldr	r3, [pc, #324]	@ (8003740 <UART_SetConfig+0x2cc>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003602:	2bc0      	cmp	r3, #192	@ 0xc0
 8003604:	d013      	beq.n	800362e <UART_SetConfig+0x1ba>
 8003606:	2bc0      	cmp	r3, #192	@ 0xc0
 8003608:	d814      	bhi.n	8003634 <UART_SetConfig+0x1c0>
 800360a:	2b80      	cmp	r3, #128	@ 0x80
 800360c:	d009      	beq.n	8003622 <UART_SetConfig+0x1ae>
 800360e:	2b80      	cmp	r3, #128	@ 0x80
 8003610:	d810      	bhi.n	8003634 <UART_SetConfig+0x1c0>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <UART_SetConfig+0x1a8>
 8003616:	2b40      	cmp	r3, #64	@ 0x40
 8003618:	d006      	beq.n	8003628 <UART_SetConfig+0x1b4>
 800361a:	e00b      	b.n	8003634 <UART_SetConfig+0x1c0>
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e0cc      	b.n	80037bc <UART_SetConfig+0x348>
 8003622:	2302      	movs	r3, #2
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	e0c9      	b.n	80037bc <UART_SetConfig+0x348>
 8003628:	2304      	movs	r3, #4
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	e0c6      	b.n	80037bc <UART_SetConfig+0x348>
 800362e:	2308      	movs	r3, #8
 8003630:	77fb      	strb	r3, [r7, #31]
 8003632:	e0c3      	b.n	80037bc <UART_SetConfig+0x348>
 8003634:	2310      	movs	r3, #16
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e0c0      	b.n	80037bc <UART_SetConfig+0x348>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a44      	ldr	r2, [pc, #272]	@ (8003750 <UART_SetConfig+0x2dc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d125      	bne.n	8003690 <UART_SetConfig+0x21c>
 8003644:	4b3e      	ldr	r3, [pc, #248]	@ (8003740 <UART_SetConfig+0x2cc>)
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800364e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003652:	d017      	beq.n	8003684 <UART_SetConfig+0x210>
 8003654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003658:	d817      	bhi.n	800368a <UART_SetConfig+0x216>
 800365a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800365e:	d00b      	beq.n	8003678 <UART_SetConfig+0x204>
 8003660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003664:	d811      	bhi.n	800368a <UART_SetConfig+0x216>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <UART_SetConfig+0x1fe>
 800366a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800366e:	d006      	beq.n	800367e <UART_SetConfig+0x20a>
 8003670:	e00b      	b.n	800368a <UART_SetConfig+0x216>
 8003672:	2300      	movs	r3, #0
 8003674:	77fb      	strb	r3, [r7, #31]
 8003676:	e0a1      	b.n	80037bc <UART_SetConfig+0x348>
 8003678:	2302      	movs	r3, #2
 800367a:	77fb      	strb	r3, [r7, #31]
 800367c:	e09e      	b.n	80037bc <UART_SetConfig+0x348>
 800367e:	2304      	movs	r3, #4
 8003680:	77fb      	strb	r3, [r7, #31]
 8003682:	e09b      	b.n	80037bc <UART_SetConfig+0x348>
 8003684:	2308      	movs	r3, #8
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e098      	b.n	80037bc <UART_SetConfig+0x348>
 800368a:	2310      	movs	r3, #16
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e095      	b.n	80037bc <UART_SetConfig+0x348>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2f      	ldr	r2, [pc, #188]	@ (8003754 <UART_SetConfig+0x2e0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d125      	bne.n	80036e6 <UART_SetConfig+0x272>
 800369a:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <UART_SetConfig+0x2cc>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036a8:	d017      	beq.n	80036da <UART_SetConfig+0x266>
 80036aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80036ae:	d817      	bhi.n	80036e0 <UART_SetConfig+0x26c>
 80036b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036b4:	d00b      	beq.n	80036ce <UART_SetConfig+0x25a>
 80036b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ba:	d811      	bhi.n	80036e0 <UART_SetConfig+0x26c>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <UART_SetConfig+0x254>
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c4:	d006      	beq.n	80036d4 <UART_SetConfig+0x260>
 80036c6:	e00b      	b.n	80036e0 <UART_SetConfig+0x26c>
 80036c8:	2301      	movs	r3, #1
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	e076      	b.n	80037bc <UART_SetConfig+0x348>
 80036ce:	2302      	movs	r3, #2
 80036d0:	77fb      	strb	r3, [r7, #31]
 80036d2:	e073      	b.n	80037bc <UART_SetConfig+0x348>
 80036d4:	2304      	movs	r3, #4
 80036d6:	77fb      	strb	r3, [r7, #31]
 80036d8:	e070      	b.n	80037bc <UART_SetConfig+0x348>
 80036da:	2308      	movs	r3, #8
 80036dc:	77fb      	strb	r3, [r7, #31]
 80036de:	e06d      	b.n	80037bc <UART_SetConfig+0x348>
 80036e0:	2310      	movs	r3, #16
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e06a      	b.n	80037bc <UART_SetConfig+0x348>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003758 <UART_SetConfig+0x2e4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d138      	bne.n	8003762 <UART_SetConfig+0x2ee>
 80036f0:	4b13      	ldr	r3, [pc, #76]	@ (8003740 <UART_SetConfig+0x2cc>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80036fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036fe:	d017      	beq.n	8003730 <UART_SetConfig+0x2bc>
 8003700:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003704:	d82a      	bhi.n	800375c <UART_SetConfig+0x2e8>
 8003706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800370a:	d00b      	beq.n	8003724 <UART_SetConfig+0x2b0>
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003710:	d824      	bhi.n	800375c <UART_SetConfig+0x2e8>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <UART_SetConfig+0x2aa>
 8003716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371a:	d006      	beq.n	800372a <UART_SetConfig+0x2b6>
 800371c:	e01e      	b.n	800375c <UART_SetConfig+0x2e8>
 800371e:	2300      	movs	r3, #0
 8003720:	77fb      	strb	r3, [r7, #31]
 8003722:	e04b      	b.n	80037bc <UART_SetConfig+0x348>
 8003724:	2302      	movs	r3, #2
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e048      	b.n	80037bc <UART_SetConfig+0x348>
 800372a:	2304      	movs	r3, #4
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e045      	b.n	80037bc <UART_SetConfig+0x348>
 8003730:	2308      	movs	r3, #8
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e042      	b.n	80037bc <UART_SetConfig+0x348>
 8003736:	bf00      	nop
 8003738:	efff69f3 	.word	0xefff69f3
 800373c:	40011000 	.word	0x40011000
 8003740:	40023800 	.word	0x40023800
 8003744:	40004400 	.word	0x40004400
 8003748:	40004800 	.word	0x40004800
 800374c:	40004c00 	.word	0x40004c00
 8003750:	40005000 	.word	0x40005000
 8003754:	40011400 	.word	0x40011400
 8003758:	40007800 	.word	0x40007800
 800375c:	2310      	movs	r3, #16
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e02c      	b.n	80037bc <UART_SetConfig+0x348>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a72      	ldr	r2, [pc, #456]	@ (8003930 <UART_SetConfig+0x4bc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d125      	bne.n	80037b8 <UART_SetConfig+0x344>
 800376c:	4b71      	ldr	r3, [pc, #452]	@ (8003934 <UART_SetConfig+0x4c0>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003772:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003776:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800377a:	d017      	beq.n	80037ac <UART_SetConfig+0x338>
 800377c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003780:	d817      	bhi.n	80037b2 <UART_SetConfig+0x33e>
 8003782:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003786:	d00b      	beq.n	80037a0 <UART_SetConfig+0x32c>
 8003788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800378c:	d811      	bhi.n	80037b2 <UART_SetConfig+0x33e>
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <UART_SetConfig+0x326>
 8003792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003796:	d006      	beq.n	80037a6 <UART_SetConfig+0x332>
 8003798:	e00b      	b.n	80037b2 <UART_SetConfig+0x33e>
 800379a:	2300      	movs	r3, #0
 800379c:	77fb      	strb	r3, [r7, #31]
 800379e:	e00d      	b.n	80037bc <UART_SetConfig+0x348>
 80037a0:	2302      	movs	r3, #2
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e00a      	b.n	80037bc <UART_SetConfig+0x348>
 80037a6:	2304      	movs	r3, #4
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	e007      	b.n	80037bc <UART_SetConfig+0x348>
 80037ac:	2308      	movs	r3, #8
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e004      	b.n	80037bc <UART_SetConfig+0x348>
 80037b2:	2310      	movs	r3, #16
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e001      	b.n	80037bc <UART_SetConfig+0x348>
 80037b8:	2310      	movs	r3, #16
 80037ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037c4:	d15b      	bne.n	800387e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80037c6:	7ffb      	ldrb	r3, [r7, #31]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d828      	bhi.n	800381e <UART_SetConfig+0x3aa>
 80037cc:	a201      	add	r2, pc, #4	@ (adr r2, 80037d4 <UART_SetConfig+0x360>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003801 	.word	0x08003801
 80037dc:	08003809 	.word	0x08003809
 80037e0:	0800381f 	.word	0x0800381f
 80037e4:	0800380f 	.word	0x0800380f
 80037e8:	0800381f 	.word	0x0800381f
 80037ec:	0800381f 	.word	0x0800381f
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	08003817 	.word	0x08003817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7fe fe38 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 80037fc:	61b8      	str	r0, [r7, #24]
        break;
 80037fe:	e013      	b.n	8003828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7fe fe48 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 8003804:	61b8      	str	r0, [r7, #24]
        break;
 8003806:	e00f      	b.n	8003828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003808:	4b4b      	ldr	r3, [pc, #300]	@ (8003938 <UART_SetConfig+0x4c4>)
 800380a:	61bb      	str	r3, [r7, #24]
        break;
 800380c:	e00c      	b.n	8003828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380e:	f7fe fd5b 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 8003812:	61b8      	str	r0, [r7, #24]
        break;
 8003814:	e008      	b.n	8003828 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800381a:	61bb      	str	r3, [r7, #24]
        break;
 800381c:	e004      	b.n	8003828 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	77bb      	strb	r3, [r7, #30]
        break;
 8003826:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d074      	beq.n	8003918 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	005a      	lsls	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	441a      	add	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d916      	bls.n	8003878 <UART_SetConfig+0x404>
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003850:	d212      	bcs.n	8003878 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	b29b      	uxth	r3, r3
 8003856:	f023 030f 	bic.w	r3, r3, #15
 800385a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	b29b      	uxth	r3, r3
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	b29a      	uxth	r2, r3
 8003868:	89fb      	ldrh	r3, [r7, #14]
 800386a:	4313      	orrs	r3, r2
 800386c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	89fa      	ldrh	r2, [r7, #14]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	e04f      	b.n	8003918 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	77bb      	strb	r3, [r7, #30]
 800387c:	e04c      	b.n	8003918 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d828      	bhi.n	80038d6 <UART_SetConfig+0x462>
 8003884:	a201      	add	r2, pc, #4	@ (adr r2, 800388c <UART_SetConfig+0x418>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038b1 	.word	0x080038b1
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038d7 	.word	0x080038d7
 800389c:	080038c7 	.word	0x080038c7
 80038a0:	080038d7 	.word	0x080038d7
 80038a4:	080038d7 	.word	0x080038d7
 80038a8:	080038d7 	.word	0x080038d7
 80038ac:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7fe fddc 	bl	800246c <HAL_RCC_GetPCLK1Freq>
 80038b4:	61b8      	str	r0, [r7, #24]
        break;
 80038b6:	e013      	b.n	80038e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7fe fdec 	bl	8002494 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61b8      	str	r0, [r7, #24]
        break;
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <UART_SetConfig+0x4c4>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e00c      	b.n	80038e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe fcff 	bl	80022c8 <HAL_RCC_GetSysClockFreq>
 80038ca:	61b8      	str	r0, [r7, #24]
        break;
 80038cc:	e008      	b.n	80038e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038d2:	61bb      	str	r3, [r7, #24]
        break;
 80038d4:	e004      	b.n	80038e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	77bb      	strb	r3, [r7, #30]
        break;
 80038de:	bf00      	nop
    }

    if (pclk != 0U)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	085a      	lsrs	r2, r3, #1
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	441a      	add	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b0f      	cmp	r3, #15
 80038fe:	d909      	bls.n	8003914 <UART_SetConfig+0x4a0>
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003906:	d205      	bcs.n	8003914 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	e001      	b.n	8003918 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003924:	7fbb      	ldrb	r3, [r7, #30]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	40007c00 	.word	0x40007c00
 8003934:	40023800 	.word	0x40023800
 8003938:	00f42400 	.word	0x00f42400

0800393c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01a      	beq.n	8003a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a3a:	d10a      	bne.n	8003a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08c      	sub	sp, #48	@ 0x30
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a90:	f7fd fb46 	bl	8001120 <HAL_GetTick>
 8003a94:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d12e      	bne.n	8003b02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	2200      	movs	r2, #0
 8003aae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f83b 	bl	8003b2e <UART_WaitOnFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d021      	beq.n	8003b02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	e853 3f00 	ldrex	r3, [r3]
 8003aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae0:	69b9      	ldr	r1, [r7, #24]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	e841 2300 	strex	r3, r2, [r1]
 8003ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1e6      	bne.n	8003abe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e011      	b.n	8003b26 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3728      	adds	r7, #40	@ 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3e:	e04f      	b.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d04b      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b48:	f7fd faea 	bl	8001120 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d302      	bcc.n	8003b5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e04e      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d037      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b80      	cmp	r3, #128	@ 0x80
 8003b74:	d034      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b40      	cmp	r3, #64	@ 0x40
 8003b7a:	d031      	beq.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d110      	bne.n	8003bac <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2208      	movs	r2, #8
 8003b90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f838 	bl	8003c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e029      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bba:	d111      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bc4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f81e 	bl	8003c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e00f      	b.n	8003c00 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	4013      	ands	r3, r2
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d0a0      	beq.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b095      	sub	sp, #84	@ 0x54
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e6      	bne.n	8003c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	3308      	adds	r3, #8
 8003c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d118      	bne.n	8003cb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f023 0310 	bic.w	r3, r3, #16
 8003c92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	6979      	ldr	r1, [r7, #20]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e6      	bne.n	8003c7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cc4:	bf00      	nop
 8003cc6:	3754      	adds	r7, #84	@ 0x54
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7ff fbaa 	bl	8003448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6979      	ldr	r1, [r7, #20]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e6      	bne.n	8003d04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fb76 	bl	8003434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d48:	bf00      	nop
 8003d4a:	3720      	adds	r7, #32
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <atoi>:
 8003d50:	220a      	movs	r2, #10
 8003d52:	2100      	movs	r1, #0
 8003d54:	f000 b87a 	b.w	8003e4c <strtol>

08003d58 <_strtol_l.isra.0>:
 8003d58:	2b24      	cmp	r3, #36	@ 0x24
 8003d5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d5e:	4686      	mov	lr, r0
 8003d60:	4690      	mov	r8, r2
 8003d62:	d801      	bhi.n	8003d68 <_strtol_l.isra.0+0x10>
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d106      	bne.n	8003d76 <_strtol_l.isra.0+0x1e>
 8003d68:	f000 f8a4 	bl	8003eb4 <__errno>
 8003d6c:	2316      	movs	r3, #22
 8003d6e:	6003      	str	r3, [r0, #0]
 8003d70:	2000      	movs	r0, #0
 8003d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d76:	4834      	ldr	r0, [pc, #208]	@ (8003e48 <_strtol_l.isra.0+0xf0>)
 8003d78:	460d      	mov	r5, r1
 8003d7a:	462a      	mov	r2, r5
 8003d7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d80:	5d06      	ldrb	r6, [r0, r4]
 8003d82:	f016 0608 	ands.w	r6, r6, #8
 8003d86:	d1f8      	bne.n	8003d7a <_strtol_l.isra.0+0x22>
 8003d88:	2c2d      	cmp	r4, #45	@ 0x2d
 8003d8a:	d110      	bne.n	8003dae <_strtol_l.isra.0+0x56>
 8003d8c:	782c      	ldrb	r4, [r5, #0]
 8003d8e:	2601      	movs	r6, #1
 8003d90:	1c95      	adds	r5, r2, #2
 8003d92:	f033 0210 	bics.w	r2, r3, #16
 8003d96:	d115      	bne.n	8003dc4 <_strtol_l.isra.0+0x6c>
 8003d98:	2c30      	cmp	r4, #48	@ 0x30
 8003d9a:	d10d      	bne.n	8003db8 <_strtol_l.isra.0+0x60>
 8003d9c:	782a      	ldrb	r2, [r5, #0]
 8003d9e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003da2:	2a58      	cmp	r2, #88	@ 0x58
 8003da4:	d108      	bne.n	8003db8 <_strtol_l.isra.0+0x60>
 8003da6:	786c      	ldrb	r4, [r5, #1]
 8003da8:	3502      	adds	r5, #2
 8003daa:	2310      	movs	r3, #16
 8003dac:	e00a      	b.n	8003dc4 <_strtol_l.isra.0+0x6c>
 8003dae:	2c2b      	cmp	r4, #43	@ 0x2b
 8003db0:	bf04      	itt	eq
 8003db2:	782c      	ldrbeq	r4, [r5, #0]
 8003db4:	1c95      	addeq	r5, r2, #2
 8003db6:	e7ec      	b.n	8003d92 <_strtol_l.isra.0+0x3a>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f6      	bne.n	8003daa <_strtol_l.isra.0+0x52>
 8003dbc:	2c30      	cmp	r4, #48	@ 0x30
 8003dbe:	bf14      	ite	ne
 8003dc0:	230a      	movne	r3, #10
 8003dc2:	2308      	moveq	r3, #8
 8003dc4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003dc8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003dcc:	2200      	movs	r2, #0
 8003dce:	fbbc f9f3 	udiv	r9, ip, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	fb03 ca19 	mls	sl, r3, r9, ip
 8003dd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003ddc:	2f09      	cmp	r7, #9
 8003dde:	d80f      	bhi.n	8003e00 <_strtol_l.isra.0+0xa8>
 8003de0:	463c      	mov	r4, r7
 8003de2:	42a3      	cmp	r3, r4
 8003de4:	dd1b      	ble.n	8003e1e <_strtol_l.isra.0+0xc6>
 8003de6:	1c57      	adds	r7, r2, #1
 8003de8:	d007      	beq.n	8003dfa <_strtol_l.isra.0+0xa2>
 8003dea:	4581      	cmp	r9, r0
 8003dec:	d314      	bcc.n	8003e18 <_strtol_l.isra.0+0xc0>
 8003dee:	d101      	bne.n	8003df4 <_strtol_l.isra.0+0x9c>
 8003df0:	45a2      	cmp	sl, r4
 8003df2:	db11      	blt.n	8003e18 <_strtol_l.isra.0+0xc0>
 8003df4:	fb00 4003 	mla	r0, r0, r3, r4
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003dfe:	e7eb      	b.n	8003dd8 <_strtol_l.isra.0+0x80>
 8003e00:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003e04:	2f19      	cmp	r7, #25
 8003e06:	d801      	bhi.n	8003e0c <_strtol_l.isra.0+0xb4>
 8003e08:	3c37      	subs	r4, #55	@ 0x37
 8003e0a:	e7ea      	b.n	8003de2 <_strtol_l.isra.0+0x8a>
 8003e0c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003e10:	2f19      	cmp	r7, #25
 8003e12:	d804      	bhi.n	8003e1e <_strtol_l.isra.0+0xc6>
 8003e14:	3c57      	subs	r4, #87	@ 0x57
 8003e16:	e7e4      	b.n	8003de2 <_strtol_l.isra.0+0x8a>
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1c:	e7ed      	b.n	8003dfa <_strtol_l.isra.0+0xa2>
 8003e1e:	1c53      	adds	r3, r2, #1
 8003e20:	d108      	bne.n	8003e34 <_strtol_l.isra.0+0xdc>
 8003e22:	2322      	movs	r3, #34	@ 0x22
 8003e24:	f8ce 3000 	str.w	r3, [lr]
 8003e28:	4660      	mov	r0, ip
 8003e2a:	f1b8 0f00 	cmp.w	r8, #0
 8003e2e:	d0a0      	beq.n	8003d72 <_strtol_l.isra.0+0x1a>
 8003e30:	1e69      	subs	r1, r5, #1
 8003e32:	e006      	b.n	8003e42 <_strtol_l.isra.0+0xea>
 8003e34:	b106      	cbz	r6, 8003e38 <_strtol_l.isra.0+0xe0>
 8003e36:	4240      	negs	r0, r0
 8003e38:	f1b8 0f00 	cmp.w	r8, #0
 8003e3c:	d099      	beq.n	8003d72 <_strtol_l.isra.0+0x1a>
 8003e3e:	2a00      	cmp	r2, #0
 8003e40:	d1f6      	bne.n	8003e30 <_strtol_l.isra.0+0xd8>
 8003e42:	f8c8 1000 	str.w	r1, [r8]
 8003e46:	e794      	b.n	8003d72 <_strtol_l.isra.0+0x1a>
 8003e48:	08004095 	.word	0x08004095

08003e4c <strtol>:
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	460a      	mov	r2, r1
 8003e50:	4601      	mov	r1, r0
 8003e52:	4802      	ldr	r0, [pc, #8]	@ (8003e5c <strtol+0x10>)
 8003e54:	6800      	ldr	r0, [r0, #0]
 8003e56:	f7ff bf7f 	b.w	8003d58 <_strtol_l.isra.0>
 8003e5a:	bf00      	nop
 8003e5c:	20000010 	.word	0x20000010

08003e60 <memset>:
 8003e60:	4402      	add	r2, r0
 8003e62:	4603      	mov	r3, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <strcat>:
 8003e70:	b510      	push	{r4, lr}
 8003e72:	4602      	mov	r2, r0
 8003e74:	7814      	ldrb	r4, [r2, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	3201      	adds	r2, #1
 8003e7a:	2c00      	cmp	r4, #0
 8003e7c:	d1fa      	bne.n	8003e74 <strcat+0x4>
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e84:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e88:	2a00      	cmp	r2, #0
 8003e8a:	d1f9      	bne.n	8003e80 <strcat+0x10>
 8003e8c:	bd10      	pop	{r4, pc}

08003e8e <strncmp>:
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	b16a      	cbz	r2, 8003eae <strncmp+0x20>
 8003e92:	3901      	subs	r1, #1
 8003e94:	1884      	adds	r4, r0, r2
 8003e96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d103      	bne.n	8003eaa <strncmp+0x1c>
 8003ea2:	42a0      	cmp	r0, r4
 8003ea4:	d001      	beq.n	8003eaa <strncmp+0x1c>
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	d1f5      	bne.n	8003e96 <strncmp+0x8>
 8003eaa:	1ad0      	subs	r0, r2, r3
 8003eac:	bd10      	pop	{r4, pc}
 8003eae:	4610      	mov	r0, r2
 8003eb0:	e7fc      	b.n	8003eac <strncmp+0x1e>
	...

08003eb4 <__errno>:
 8003eb4:	4b01      	ldr	r3, [pc, #4]	@ (8003ebc <__errno+0x8>)
 8003eb6:	6818      	ldr	r0, [r3, #0]
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000010 	.word	0x20000010

08003ec0 <__libc_init_array>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ef8 <__libc_init_array+0x38>)
 8003ec4:	4c0d      	ldr	r4, [pc, #52]	@ (8003efc <__libc_init_array+0x3c>)
 8003ec6:	1b64      	subs	r4, r4, r5
 8003ec8:	10a4      	asrs	r4, r4, #2
 8003eca:	2600      	movs	r6, #0
 8003ecc:	42a6      	cmp	r6, r4
 8003ece:	d109      	bne.n	8003ee4 <__libc_init_array+0x24>
 8003ed0:	4d0b      	ldr	r5, [pc, #44]	@ (8003f00 <__libc_init_array+0x40>)
 8003ed2:	4c0c      	ldr	r4, [pc, #48]	@ (8003f04 <__libc_init_array+0x44>)
 8003ed4:	f000 f818 	bl	8003f08 <_init>
 8003ed8:	1b64      	subs	r4, r4, r5
 8003eda:	10a4      	asrs	r4, r4, #2
 8003edc:	2600      	movs	r6, #0
 8003ede:	42a6      	cmp	r6, r4
 8003ee0:	d105      	bne.n	8003eee <__libc_init_array+0x2e>
 8003ee2:	bd70      	pop	{r4, r5, r6, pc}
 8003ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee8:	4798      	blx	r3
 8003eea:	3601      	adds	r6, #1
 8003eec:	e7ee      	b.n	8003ecc <__libc_init_array+0xc>
 8003eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef2:	4798      	blx	r3
 8003ef4:	3601      	adds	r6, #1
 8003ef6:	e7f2      	b.n	8003ede <__libc_init_array+0x1e>
 8003ef8:	080041a0 	.word	0x080041a0
 8003efc:	080041a0 	.word	0x080041a0
 8003f00:	080041a0 	.word	0x080041a0
 8003f04:	080041a4 	.word	0x080041a4

08003f08 <_init>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	bf00      	nop
 8003f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0e:	bc08      	pop	{r3}
 8003f10:	469e      	mov	lr, r3
 8003f12:	4770      	bx	lr

08003f14 <_fini>:
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f16:	bf00      	nop
 8003f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f1a:	bc08      	pop	{r3}
 8003f1c:	469e      	mov	lr, r3
 8003f1e:	4770      	bx	lr
